<?xml version="1.0" encoding="UTF-8"?>

<!--
  ~ Copyright (c) 2011. Mind-Alliance Systems LLC.
  ~ All rights reserved.
  ~ CONFIDENTIAL
  -->

<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sec="http://www.springframework.org/schema/security" xsi:schemaLocation="
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd       
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd "
       default-autowire="byName">

    <context:property-placeholder location="file:${user.home}/playbook.properties"/>
    <context:annotation-config/>
    <context:component-scan base-package="com.mindalliance.playbook"/>

    <bean id="serverUrl" class="java.lang.String">
        <constructor-arg value="${server.url}"/>
    </bean>
    <bean id="from" class="java.lang.String">
        <constructor-arg value="${gmail.from}"/>
    </bean>
    
    <!-- ==================================================================== Hibernate persistence -->
    <tx:annotation-driven/>
    <bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager"/>

    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close" depends-on="dbserver">
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="${dataSource.url}"/>
        <property name="username" value="${dataSource.user}"/>
        <property name="password" value="${dataSource.password}"/>
    </bean>

    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.ddl}</prop>
                <prop key="hibernate.show_sql">false</prop>
                <prop key="hibernate.search.lucene_version">LUCENE_35</prop>
                <prop key="hibernate.search.default.directory_provider">filesystem</prop>
                <prop key="hibernate.search.default.indexBase">data/lucene/</prop>
            </props>
        </property>
        
        <property name="packagesToScan">
            <list>
                <value>com.mindalliance.playbook.model</value>
            </list>
        </property>
    </bean>
    
    <bean id="entityInterceptor" class="com.mindalliance.playbook.dao.impl.CustomInterceptor"/>

    <bean id="dbserver" class="org.h2.tools.Server" factory-method="createTcpServer" 
          init-method="start" destroy-method="stop">
        <constructor-arg value="-tcp,-tcpAllowOthers"/>
    </bean>
    
    <!-- ==================================================================== Mail -->
    <bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
        <property name="host" value="smtp.gmail.com"/>
        <property name="port" value="587"/>
        <property name="username" value="${gmail.user}"/>
        <property name="password" value="${gmail.password}"/>
        <property name="javaMailProperties">
            <props>
                <prop key="mail.smtp.auth">true</prop>
                <prop key="mail.smtp.starttls.enable">true</prop>
                <prop key="mail.smtp.debug">true</prop>
            </props>
        </property>
    </bean>

    <!-- ==================================================================== Security -->
    <bean id="captchaEngine" class="com.octo.captcha.engine.GenericCaptchaEngine">
        <constructor-arg>
            <bean class="com.octo.captcha.image.gimpy.GimpyFactory">
                <constructor-arg>
                    <bean class="com.octo.captcha.component.word.wordgenerator.ComposeDictionaryWordGenerator">
                        <constructor-arg>
                            <bean class="com.octo.captcha.component.word.FileDictionary">
                                <constructor-arg value="toddlist"/>
                            </bean>
                        </constructor-arg>
                    </bean>
                </constructor-arg>

                <constructor-arg>
                    <bean class="com.octo.captcha.component.image.wordtoimage.ComposedWordToImage">
                        <constructor-arg>
                            <bean class="com.octo.captcha.component.image.fontgenerator.RandomFontGenerator">
                                <constructor-arg value="28"/>
                                <constructor-arg value="36"/>
                                <constructor-arg>
                                    <list>
                                        <bean class="java.awt.Font">
                                            <constructor-arg value="Times New Roman"/>
                                            <constructor-arg value="0"/>
                                            <constructor-arg value="36"/>
                                        </bean>
                                        <bean class="java.awt.Font">
                                            <constructor-arg value="Comic Sans MS"/>
                                            <constructor-arg value="0"/>
                                            <constructor-arg value="36"/>
                                        </bean>
                                    </list>
                                </constructor-arg>
                            </bean>
                        </constructor-arg>
                        <constructor-arg>
                            <bean class="com.octo.captcha.component.image.backgroundgenerator.FunkyBackgroundGenerator">
                                <constructor-arg value="300"/>
                                <constructor-arg value="100"/>
                                <!--<constructor-arg value="WHITE"/>-->
                            </bean>
                        </constructor-arg>
                        <constructor-arg>
                            <bean class="com.octo.captcha.component.image.textpaster.NonLinearTextPaster">
                                <constructor-arg value="6"/>
                                <constructor-arg value="10"/>
                                <constructor-arg value="YELLOW"/>
                            </bean>
                        </constructor-arg>
                    </bean>
                </constructor-arg>

            </bean>
        </constructor-arg>
    </bean>
    <bean name="captchaService" class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService"/>

    <bean name="account" class="com.mindalliance.playbook.dao.impl.AccountDaoImpl" factory-method="currentAccount"
          scope="request" autowire="no">
        <constructor-arg ref="accountDao"/> 
    </bean>

    <sec:http pattern="/css/**" security="none"/>
    <sec:http pattern="/images/**" security="none"/>
    <sec:http pattern="/scripts/**" security="none"/>

    <sec:http auto-config='true' create-session="always" disable-url-rewriting="false">
        <sec:intercept-url pattern="/login.html" access="ROLE_ANONYMOUS"/>
        <sec:intercept-url pattern="/register.html" access="ROLE_ANONYMOUS"/>
        <sec:intercept-url pattern="/jcaptcha.jpg" access="ROLE_ANONYMOUS"/>
        <sec:intercept-url pattern="/thanks.html" access="ROLE_ANONYMOUS"/>
        <sec:intercept-url pattern="/reset.html" access="ROLE_ANONYMOUS,ROLE_USER"/>
        <sec:intercept-url pattern="/confirm.html" access="ROLE_ANONYMOUS"/>
        <sec:intercept-url pattern="/wicket/**" access="ROLE_ANONYMOUS,ROLE_USER"/>
        <sec:intercept-url pattern="/**" access="ROLE_USER"/>

        <sec:form-login login-page="/login.html" login-processing-url="/login.do"
                        authentication-failure-url="/login.html?login_error=1" 
                        default-target-url="/plays.html"/>
        <sec:logout logout-url="/logout" logout-success-url="/plays.html"/>

        <sec:remember-me key="playbook"/>
    </sec:http>

    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider user-service-ref="accountDao">
            <sec:password-encoder hash="sha" base64="true"/>
        </sec:authentication-provider>
    </sec:authentication-manager>

    <sec:global-method-security secured-annotations="enabled"/>

    <bean id="runAsManager" class="org.springframework.security.access.intercept.RunAsManagerImpl">
        <property name="key" value="bla"/>
    </bean>
    <bean id="runAsAuthenticationProvider"
          class="org.springframework.security.access.intercept.RunAsImplAuthenticationProvider">
        <property name="key" value="bla"/>
    </bean>

    <bean id="securityInterceptor"
          class="org.springframework.security.access.intercept.aopalliance.MethodSecurityInterceptor">
        <property name="securityMetadataSource">
            <bean class="org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource"/>
        </property>
        <property name="validateConfigAttributes" value="false"/>
    </bean>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg>
            <list>
                <bean class="org.springframework.security.access.vote.RoleVoter"/>
                <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
            </list>
        </constructor-arg>
    </bean>

</beans>
