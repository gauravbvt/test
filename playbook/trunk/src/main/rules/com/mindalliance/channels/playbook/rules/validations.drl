package com.mindalliance.channels.playbook.rules

import com.mindalliance.channels.playbook.ref.*
import com.mindalliance.channels.playbook.ifm.*
import com.mindalliance.channels.playbook.ifm.definition.*
import com.mindalliance.channels.playbook.ifm.info.*
import com.mindalliance.channels.playbook.ifm.sharing.*
import com.mindalliance.channels.playbook.ifm.project.*
import com.mindalliance.channels.playbook.ifm.project.resources.*
import com.mindalliance.channels.playbook.ifm.project.environment.*
import com.mindalliance.channels.playbook.ifm.playbook.*
import com.mindalliance.channels.playbook.ifm.taxonomy.*
import com.mindalliance.channels.playbook.analysis.*
import com.mindalliance.channels.playbook.analysis.problem.*
import com.mindalliance.channels.playbook.analysis.profile.*
import com.mindalliance.channels.playbook.analysis.compliance.*
import java.util.*
import com.mindalliance.channels.playbook.support.drools.*

#### Validate information acts ####

rule "invalid information act"
    agenda-group "validations"
    when
        $project: Project($id: id)   # force re-evaluation whenever project changes (e.g. a resource is removed)
        $el:  InformationAct(project.id == $project.id, $actor:actorAgent)
        eval(!$project.getResources().contains($actor))
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "actorMissing"), "The actor is missing");
    end

rule "invalid flow act target"
    agenda-group "validations"
    when
        $project: Project($id: id)   # force re-evaluation whenever project changes (e.g. a resource is removed)
        $el: FlowAct(project.id == $project.id, $target:targetAgent)
        eval(!$project.getResources().contains($target))
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el,"targetMissing"), "The target agent is missing");
    end

rule "invalid flow act information"
    agenda-group "validations"
    when
        $el: SharingAct($info:information)
        eval(!$info.isDefined())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "noSharedInfo"), "The shared information is not defined");
    end

rule "invalid flow act - sender is receiver"
    agenda-group "validations"
    when
        $el: FlowAct($actor:actorAgent, targetAgent == $actor)
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "senderIsReceiver"), "The sender can not also be the receiver");
    end

rule "invalid assignation assignee"
    agenda-group "validations"
    when
        $project: Project($id: id)   # force re-evaluation whenever project changes (e.g. a resource is removed)
        $el: Assignation(project.id == $project.id, $assignee:assigneeAgent)
        eval(!$project.getResources().contains($assignee))
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "assigneeMissing"), "The assignee is missing");
    end

rule "invalid assignation responsibility"
    agenda-group "validations"
    when
        $el: Assignation($responsibility:responsibility)
        eval(!$responsibility.isDefined())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "noResponsibility"), "The responsibility is undefined");
    end

rule "invalid association associate"
    agenda-group "validations"
    when
        $project: Project($id: id)   # force re-evaluation whenever project changes (e.g. a resource is removed)
        $el: Association(project.id == $project.id, $associate:toAgent)
        eval(!$project.getResources().contains($associate))
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "associateMissing"), "The associate is missing");
    end

rule "invalid association relationship"
    agenda-group "validations"
    when
        $el: Association($name:relationshipName)
        eval($name.trim().isEmpty())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "noRelationshipName"), "No relationship name");
    end

rule "invalid information request need"
    agenda-group "validations"
    when
        $el: InformationRequest($need:informationNeed)
        eval(!$need.isDefined())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "noInformationNeed"), "The information need is unspecified");
    end

rule "invalid relocation"
    agenda-group "validations"
    when
        $el: Relocation($location:location)
        eval(!$location.isDefined())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "noLocation"), "The location is not defined");
    end

rule "invalid sharing commitment"
    agenda-group "validations"
    when
        $el: SharingCommitment($protocol:protocol)
        eval(!$protocol.isDefined())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "noProtocol"), "The sharing protocol is not defined");
    end

rule "invalid sharing request protocol"
    agenda-group "validations"
    when
        $el: SharingRequest($protocol:protocol)
        eval(!$protocol.isDefined())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "noProtocol"), "The sharing protocol is not defined");
    end

rule "invalid sharing request information spec"
    agenda-group "validations"
    when
        $el: SharingRequest($infoSpec:protocol.informationSpec)
        eval(!((InformationDefinition)$infoSpec).matchesAll())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "protocolInfoSpec"), "The sharing protocol does not define what information it is about");
    end

### Validate project elements

rule "invalid sharing agreement"
    agenda-group "validations"      // TODO break into smaller rules for pointed diagnostic
    when
        $el: SharingAgreement($source:source, $recipient:recipient, $protocol:protocol, $constraints:constraints)
        eval(!Channels.isSet($source) || !Channels.isSet($recipient) || !$protocol.isDefined())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "agreementIncomplete"), "The sharing agreement is not sufficiently defined");
    end

rule "invalid policy"
    agenda-group "validations"         // TODO break into smaller rules for pointed diagnostic
    when
        $el: Policy($sourceSpec:sourceSpec, $recipientSpec:recipientSpec, $infoSpec:informationSpec, $rels: relationshipNames)
        eval($sourceSpec.matchesAll() || $infoSpec.matchesAll() || ($recipientSpec.matchesAll() && $rels.isEmpty()) )
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "policyIncomplete"), "The policy is not sufficiently defined.");
    end

rule "invalid relationship"
    agenda-group "validations"        // TODO break into smaller rules for pointed diagnostic
    when
        $el: Relationship($from: fromAgent, $to: toAgent, $name: name)
        eval(!Channels.isSet($from) || !Channels.isSet($to) || $name.isEmpty())
    then
        RuleHelper.inferFrom(drools, $el, new Invalidation($el, "relationshipIncomplete"), "The relationship is not sufficiently defined.");
    end


### Validate model elements

### Validate other playbook elements
