package com.mindalliance.channels.playbook.rules

import com.mindalliance.channels.playbook.ref.*
import com.mindalliance.channels.playbook.ifm.*
import com.mindalliance.channels.playbook.ifm.definition.*
import com.mindalliance.channels.playbook.ifm.info.*
import com.mindalliance.channels.playbook.ifm.sharing.*
import com.mindalliance.channels.playbook.ifm.project.*
import com.mindalliance.channels.playbook.ifm.project.resources.*
import com.mindalliance.channels.playbook.ifm.project.environment.*
import com.mindalliance.channels.playbook.ifm.playbook.*
import com.mindalliance.channels.playbook.ifm.taxonomy.*
import com.mindalliance.channels.playbook.analysis.*
import com.mindalliance.channels.playbook.analysis.profile.*
import com.mindalliance.channels.playbook.analysis.compliance.*
import java.util.*
import com.mindalliance.channels.playbook.support.drools.*

##### Direct profile element generation by Information Acts ###########

## TODO - avoid duplication in profile elements (e.g. multiple information transfers of the same information by an agent)

rule "detection"
    agenda-group "profiles"
	when
		$act: Detection($actor:actorAgent,  $information: information)
		not (exists Invalid(element == $act))
	then
	    RuleHelper.inferFrom(drools, $act, new Know($act, (Agent)$actor.deref(), $information), "Agent knows what it detects");
    end


rule "sharing act"
    agenda-group "profiles"
    when
        $act: SharingAct($actor:actorAgent, $target:targetAgent, $information: information)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new Know($act, (Agent)$target.deref(), $information), "Source agent knows information it shares.");
        RuleHelper.inferFrom(drools, $act, new Know($act, (Agent)$actor.deref(), $information), "Recipient agent learns shared information.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Know($act, (Agent)$target.deref(), $information)), "Source aware that the recipient knows the shared information.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$target.deref(), new Know($act, (Agent)$actor.deref(), $information)), "Recipient aware that the source knows the shared information.");
    end

rule "task"
    agenda-group "profiles"
    when
        $act: Task($actor:actorAgent, $needs:informationNeeds)
		not (exists Invalid(element == $act))
    then
        for (InformationNeed need : (List<InformationNeed>)$needs) {
            if (need.isDefined()) {
                RuleHelper.inferFrom(drools, $act, new NeedToKnow($act, (Agent)$actor.deref(), need), "Agent needs to know while doing task.");
            }
        }
    end

rule "information request"
    agenda-group "profiles"
    when
        $act: InformationRequest($actor:actorAgent, $target:targetAgent, $need:informationNeed)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new NeedToKnow($act, (Agent)$actor.deref(), $need), "An agent expressed a need to know.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$target.deref(), new NeedToKnow($act, (Agent)$actor.deref(), $need)), "The recipient of an information request knows that the sender needs information.");
    end

rule "assignation transmitted"
    agenda-group "profiles"
    when
        $act: Assignation($actor:actorAgent, $target:targetAgent, $responsibility:responsibility, $assignee:assigneeAgent,
                          assigneeAgent != targetAgent, assigneeAgent != $actor)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Assignment($act, (Agent)$assignee.deref(), $responsibility)), "Sender knows of another agent's assignment.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$target.deref(), new Assignment($act, (Agent)$assignee.deref(), $responsibility)), "Recipient knows of another agent's assignment.");
    end

rule "own assignation received"
    agenda-group "profiles"
    when
        $act: Assignation($actor:actorAgent, $target:targetAgent, $responsibility: responsibility, $assignee:assigneeAgent)
        eval($assignee == $target)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new Assignment($act, (Agent)$target.deref(), $responsibility), "Recipient is now aware of its responsibility");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Assignment($act, (Agent)$target.deref(), $responsibility)), "Sender knows of recipient's responsibility.");
    end

rule "own assignation sent"
    agenda-group "profiles"
    when
        $act: Assignation($actor:actorAgent, $target:targetAgent, $responsibility: responsibility, $assignee:assigneeAgent)
        eval($assignee == $actor)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new Assignment($act, (Agent)$target.deref(), $responsibility), "Recipient is now aware of its responsibility");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$target.deref(), new Assignment($act, (Agent)$actor.deref(), $responsibility)), "Recipient knows of source's responsibility.");
    end

rule "association"
    agenda-group "profiles"
    when
        $act: Association($actor:actorAgent, $associate:toAgent, $name:relationshipName)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new Link($act, (Agent)$actor.deref(), $name, (Agent)$associate.deref()), "Agent now engaged in relationship.");
    end

rule "reverse association"
    agenda-group "profiles"
    when
        $act: Association($actor:actorAgent, $associate:toAgent, $name:reverseRelationshipName)
        eval(!$name.isEmpty())
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new Link($act, (Agent)$associate.deref(), $name, (Agent)$actor.deref()), "Agent now engaged in reverse relationship.");
    end

rule "confirmation request"
    agenda-group "profiles"
    when
        $act: ConfirmationRequest($actor:actorAgent, $target:targetAgent, $information:information, $sourceSpec:sourceSpec)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new SourceNeed($act, (Agent)$actor.deref(), $sourceSpec, $information), "Sender needs a source for given information.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$target.deref(), new SourceNeed($act, (Agent)$actor.deref(), $sourceSpec, $information)), "Recipient aware that sender needs a source for given information.");
    end

rule "current relocation"
    agenda-group "profiles"
    when
        $act: Relocation($actor:actorAgent, $location:location)
		not (exists Invalid(element == $act))
		// there is no later locality of the agent
		not ( exists (Locality(agent == $actor , eval(start.isLongerThan($act.startTime())))) )
    then
        RuleHelper.inferFrom(drools, $act, new Locality($act, (Agent)$actor.deref(), $location), "Agent now at current location.");
    end

rule "prior relocation"
    agenda-group "profiles"
    when
        $act: Relocation($actor:actorAgent, $location:location)
		not (exists Invalid(element == $act))
		// there is a later locality of the agent
		$later:Locality(agent == $actor , $later_start:start , eval(start.isLongerThan($act.startTime())))
		// and none in between
		not (exists (Locality(agent == $actor, this != $later, eval(start.isLongerThan($act.startTime())), eval(start.isShorterThan($later_start)))))
    then
        Locality locality = new Locality($act , (Agent)$actor.deref(), $location);
        locality.setEnd($later_start);
        RuleHelper.inferFrom(drools, $act, locality, "Agent's prior location.");
    end

rule "sharing request"
    agenda-group "profiles"
    when
        $act: SharingRequest($actor:actorAgent, $target:targetAgent, $protocol:protocol, $infoSpec:protocol.informationSpec)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act, new NeedToKnow($act, (Agent)$actor.deref(), InformationNeed.fromSharingProtocol($protocol)),
                  "Sender communicated a need to know.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$target.deref(),
                                    new NeedToKnow($act, (Agent)$actor.deref(), InformationNeed.fromSharingProtocol($protocol))),
                                    "Recipient aware of sender's need to know.");
    end

rule "sharing commitment"
    agenda-group "profiles"
    when
        $act: SharingCommitment($actor:actorAgent, $target:targetAgent, $protocol:protocol, $constraints:constraints)
		not (exists Invalid(element == $act))
    then
        RuleHelper.inferFrom(drools, $act,new Commitment($act, (Agent)$actor.deref(), (Agent)$target.deref(), $protocol, $constraints), "Agent is committed.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$target.deref(), new Commitment($act, (Agent)$actor.deref(), (Agent)$target.deref(), $protocol, $constraints)),
                    "Recipient aware of commitment.");
    end

### Insight gained by detection of Information Acts

## Detection of a detection brings no new knowledge or insight (actor does not know how the event is interpreted by the observed)

rule "detection of sharing act"
    agenda-group "profiles"
    when
        $act: Detection($actor:actorAgent, $event:information.event != null)
		not (exists Invalid(element == $act))
        $sharing: SharingAct(eval (id == $act.getInformation().getEvent().getId()), $d_actor:actorAgent, $d_target:targetAgent, $d_info:information)
		not (exists Invalid(element == $sharing))
    then
        RuleHelper.inferFrom(drools, $act, new Know($act, (Agent)$actor.deref(), $d_info), "Observer learns shared information.");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Know($sharing, (Agent)$d_actor.deref(), $d_info)), "Observer aware that sender knows the shared information");
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Know($sharing, (Agent)$d_target.deref(), $d_info)), "Observer aware that recipient knows the shared information");
    end

rule "detection of assignation"
    agenda-group "profiles"
    when
        $act: Detection($actor:actorAgent, information.event != null)
		not (exists Invalid(element == $act))
        $assignation: Assignation(eval(id == $act.getInformation().getEvent().getId()), $d_actor:actorAgent, $d_target:targetAgent, $d_resp:responsibility, $d_assignee:assigneeAgent)
		not (exists Invalid(element == $assignation))
    then
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Assignment($assignation, (Agent)$d_assignee.deref(), $d_resp)), "Observer aware of assignment.");
    end

rule "detection of association"
    agenda-group "profiles"
    when
        $act: Detection($actor:actorAgent, information.event != null)
		not (exists Invalid(element == $act))
        $association: Association(eval(id == $act.getInformation().getEvent().getId()), $d_actor:actorAgent, $d_associate:toAgent, $d_name:relationshipName)
		not (exists Invalid(element == $association))
    then
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Link($association, (Agent)$d_actor.deref(), $d_name, (Agent)$d_associate.deref())), "Observer aware of new relationship.");
    end

rule "detection of reverse association"
    agenda-group "profiles"
    when
        $act: Detection($actor:actorAgent, information.event != null)
		not (exists Invalid(element == $act))
        $association: Association(eval(id == $act.getInformation().getEvent().getId()), $d_actor:actorAgent, $d_associate:toAgent, $d_rname:reverseRelationshipName != "")
		not (exists Invalid(element == $association))
    then
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Link($association, (Agent)$d_associate.deref(), $d_rname, (Agent)$d_actor.deref())), "Observer aware of new, reverse relationship.");
    end

rule "detection of confirmation request"
    agenda-group "profiles"
    when
        $act: Detection($actor:actorAgent, information.event != null)
		not (exists Invalid(element == $act))
        $confirmationRequest: ConfirmationRequest(eval(id == $act.getInformation().getEvent().getId()), $d_actor:actorAgent, $d_target:targetAgent,
                                                  $d_info:information, $d_sourceSpec:sourceSpec)
		not (exists Invalid(element == $confirmationRequest))
    then
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new SourceNeed($confirmationRequest, (Agent)$d_actor.deref(), $d_sourceSpec, $d_info)), "Observer aware of sender's source need.");
    end

rule "detection of information request"
    agenda-group "profiles"
    when
        $act: Detection($actor:actorAgent, information.event != null)
		not (exists Invalid(element == $act))
        $informationRequest: InformationRequest(eval(id == $act.getInformation().getEvent().getId()),
                                                  $d_actor:actorAgent, $d_target:targetAgent,
                                                  $d_need:informationNeed)
		not (exists Invalid(element == $informationRequest))
    then
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new NeedToKnow($informationRequest, (Agent)$d_actor.deref(), $d_need)), "Observer aware of sender's need to know.");
    end

rule "detection of relocation"
    agenda-group "profiles"
    when
        $act: Detection($actor:actorAgent, information.event != null)
		not (exists Invalid(element == $act))
        $relocation: Relocation(eval(id == $act.getInformation().getEvent().getId()), 
                                      $d_actor:actorAgent,
                                      $d_location:location)
		not (exists Invalid(element == $relocation))
    then
        RuleHelper.inferFrom(drools, $act, new Insight($act, (Agent)$actor.deref(), new Locality($relocation, (Agent)$d_actor.deref(), $d_location)), "Observer aware of other's relocation.");
    end

# TODO - Detection of sharing requests, sharing commitments, tasks -> ?

# Assignments from Roles

rule "assignments from role"    // add role-defined assignments for each resource in each playbook
    agenda-group "profiles"
    when
        $resource: Resource($roles:roles)
        not (exists Invalid(element == $resource))
        $playbook: Playbook()
        not (exists Invalid(element == $playbook))
    then
        // Logger.getLogger("rules").info("Inserting assignments of " + $resource + " with roles " + $roles + " in playbook " + $playbook);
        for(Ref ref : (List<Ref>)$roles) {
           Role role = (Role)ref.deref();
           if (role != null) {
               for (Responsibility responsibility : (List<Responsibility>)role.getResponsibilities()) {
                RuleHelper.inferFrom(drools, role, new Assignment($playbook, (Agent)$resource, responsibility), "Permanent assignment from role.");
               }
           }
        }
    end

rule "n2k from assignment"
    agenda-group "profiles"
    when
        $assignment: Assignment($agent:agent, $need:responsibility.informationNeed)
    then
        RuleHelper.inferFrom(drools, $assignment, new NeedToKnow($assignment, $agent, (InformationNeed)$need), "Standing information need from assignment");
    end

# Commitments from SharingAgreements

rule "commitments from sharing agreement" // add Commitments from SharingAgreements in each playbook
    agenda-group "profiles"
    when
        $agreement: SharingAgreement($source:source, $recipient:recipient)
        not (exists Invalid(element == $agreement))
        $playbook: Playbook()
        not (exists Invalid(element == $playbook))
    then
        RuleHelper.inferFrom(drools, $agreement, new Commitment($playbook, $agreement), "Permanent commitment from sharing agreement.");
    end

rule "commitments from sharing agreement via organization" // add Commitments in each playbook from SharingAgreements for each resource in organization
    agenda-group "profiles"
    when
        $agreement: SharingAgreement($source_id:source.id, $recipient:recipient)
        not (exists Invalid(element == $agreement))
        $organization: Organization(id == $source_id)
        not (exists Invalid(element == $organization))
        $resource: OrganizationResource(organization.id == $source_id)
        not (exists Invalid(element == $resource))
        $playbook: Playbook()
        not (exists Invalid(element == $playbook))
    then
        RuleHelper.inferFrom(drools, $agreement, new Commitment($playbook, $resource, (Agent)$recipient.deref(), $agreement), "Permanent commitment from sharing agreement via organization.");
    end


# Links from Relationships

rule "links from relationships"
    agenda-group "profiles"
    when
        $relationship: Relationship($from: fromAgent, $to: toAgent, $name: name)
        not (exists Invalid(element == $relationship))
        $playbook: Playbook()
        not (exists Invalid(element == $playbook))
    then
        RuleHelper.inferFrom(drools, $relationship, new Link($relationship, $playbook, (Agent)$from.deref(), $name, (Agent)$to.deref()), "Permanent link from relationship");
    end
