// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mindalliance.sb.model;

import org.springframework.format.annotation.DateTimeFormat;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.Set;

privileged aspect Respondent_Roo_DbManaged {

    @ManyToOne
    @JoinColumn(name = "contact_info", referencedColumnName = "id", nullable = false)
    private ContactInfo Respondent.contactInfo;

    @Column(name = "survey_opinion", columnDefinition = "INT")
    @NotNull
    private Integer Respondent.surveyOpinion;

    @Column(name = "difficult", columnDefinition = "BIT")
    private Boolean Respondent.difficult;

    @Column(name = "comments", columnDefinition = "TEXT")
    private String Respondent.comments;

    @Column(name = "submitted", columnDefinition = "DATE")
    @NotNull
    @Temporal(TemporalType.DATE)
    @DateTimeFormat(style = "MM")
    private Date Respondent.submitted;

    @Column(name = "problems", columnDefinition = "TEXT")
    private String Respondent.problems;

    @ManyToMany
    @JoinTable(name = "respondent_expertise", joinColumns = { @JoinColumn(name = "respondent", nullable = false) }, inverseJoinColumns = { @JoinColumn(name = "expertise", nullable = false) })
    private Set<Expertise> Respondent.expertises;
    
    @OneToMany(mappedBy = "respondent", cascade = CascadeType.REMOVE)
    private Set<Document> Respondent.documents;
    
    @OneToMany(mappedBy = "respondent", cascade = CascadeType.REMOVE)
    private Set<Eoc> Respondent.eocs;
    
    @OneToMany(mappedBy = "respondent", cascade = CascadeType.REMOVE)
    private Set<OrganizationCapability> Respondent.organizationCapabilities;
    
    @OneToMany(mappedBy = "respondent", cascade = CascadeType.REMOVE)
    private Set<OrganizationIncident> Respondent.organizationIncidents;
    
    @OneToMany(mappedBy = "respondent", cascade = CascadeType.ALL)
    private Set<RespondentSubcommittee> Respondent.respondentSubcommittees;
    
    @OneToMany(mappedBy = "respondent", cascade = CascadeType.REMOVE)
    private Set<SituationReport> Respondent.situationReports;
    
    @OneToMany(mappedBy = "respondent", cascade = CascadeType.REMOVE)
    private Set<SuperbowlPlan> Respondent.superbowlPlans;
    
    
    public Set<Expertise> Respondent.getExpertises() {
        return expertises;
    }
    
    public void Respondent.setExpertises(Set<Expertise> expertises) {
        this.expertises = expertises;
    }
    
    public Set<Document> Respondent.getDocuments() {
        return documents;
    }
    
    public void Respondent.setDocuments(Set<Document> documents) {
        this.documents = documents;
    }
    
    public Set<Eoc> Respondent.getEocs() {
        return eocs;
    }
    
    public void Respondent.setEocs(Set<Eoc> eocs) {
        this.eocs = eocs;
    }
    
    public Set<OrganizationCapability> Respondent.getOrganizationCapabilities() {
        return organizationCapabilities;
    }
    
    public void Respondent.setOrganizationCapabilities(Set<OrganizationCapability> organizationCapabilities) {
        this.organizationCapabilities = organizationCapabilities;
    }
    
    public Set<OrganizationIncident> Respondent.getOrganizationIncidents() {
        return organizationIncidents;
    }
    
    public void Respondent.setOrganizationIncidents(Set<OrganizationIncident> organizationIncidents) {
        this.organizationIncidents = organizationIncidents;
    }
    
    public Set<RespondentSubcommittee> Respondent.getRespondentSubcommittees() {
        return respondentSubcommittees;
    }
    
    public void Respondent.setRespondentSubcommittees(Set<RespondentSubcommittee> respondentSubcommittees) {
        this.respondentSubcommittees = respondentSubcommittees;
    }
    
    public Set<SituationReport> Respondent.getSituationReports() {
        return situationReports;
    }
    
    public void Respondent.setSituationReports(Set<SituationReport> situationReports) {
        this.situationReports = situationReports;
    }
    
    public Set<SuperbowlPlan> Respondent.getSuperbowlPlans() {
        return superbowlPlans;
    }
    
    public void Respondent.setSuperbowlPlans(Set<SuperbowlPlan> superbowlPlans) {
        this.superbowlPlans = superbowlPlans;
    }
    
    public ContactInfo Respondent.getContactInfo() {
        return contactInfo;
    }
    
    public void Respondent.setContactInfo(ContactInfo contactInfo) {
        this.contactInfo = contactInfo;
    }
    
    public Integer Respondent.getSurveyOpinion() {
        return surveyOpinion;
    }
    
    public void Respondent.setSurveyOpinion(Integer surveyOpinion) {
        this.surveyOpinion = surveyOpinion;
    }
    
    public Boolean Respondent.getDifficult() {
        return difficult;
    }
    
    public void Respondent.setDifficult(Boolean difficult) {
        this.difficult = difficult;
    }
    
    public String Respondent.getComments() {
        return comments;
    }
    
    public void Respondent.setComments(String comments) {
        this.comments = comments;
    }
    
    public Date Respondent.getSubmitted() {
        return submitted;
    }
    
    public void Respondent.setSubmitted(Date submitted) {
        this.submitted = submitted;
    }
    
    public String Respondent.getProblems() {
        return problems;
    }
    
    public void Respondent.setProblems(String problems) {
        this.problems = problems;
    }
    
}
