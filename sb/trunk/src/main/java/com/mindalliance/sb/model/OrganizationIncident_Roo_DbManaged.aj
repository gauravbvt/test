// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mindalliance.sb.model;

import com.mindalliance.sb.model.Incident;
import com.mindalliance.sb.model.IncidentCapability;
import com.mindalliance.sb.model.IncidentMissionArea;
import com.mindalliance.sb.model.IncidentSystem;
import com.mindalliance.sb.model.IncidentTask;
import com.mindalliance.sb.model.Organization;
import com.mindalliance.sb.model.OrganizationIncident;
import com.mindalliance.sb.model.Respondent;
import com.mindalliance.sb.model.Sharing;
import java.util.Set;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotNull;

privileged aspect OrganizationIncident_Roo_DbManaged {
    
    @OneToMany(mappedBy = "organizationIncident", cascade = CascadeType.REMOVE)
    private Set<IncidentCapability> OrganizationIncident.incidentCapabilities;
    
    @OneToMany(mappedBy = "organizationIncident", cascade = CascadeType.REMOVE)
    private Set<IncidentMissionArea> OrganizationIncident.incidentMissionAreas;
    
    @OneToMany(mappedBy = "organizationIncident", cascade = CascadeType.REMOVE)
    private Set<IncidentSystem> OrganizationIncident.incidentSystems;
    
    @OneToMany(mappedBy = "organizationIncident", cascade = CascadeType.REMOVE)
    private Set<IncidentTask> OrganizationIncident.incidentTasks;
    
    @OneToMany(mappedBy = "organizationIncident", cascade = CascadeType.REMOVE)
    private Set<Sharing> OrganizationIncident.sharings;
    
    @ManyToOne
    @JoinColumn(name = "incident", referencedColumnName = "id", nullable = false, insertable = false, updatable = false)
    private Incident OrganizationIncident.incident;
    
    @ManyToOne
    @JoinColumn(name = "organization", referencedColumnName = "id", nullable = false, insertable = false, updatable = false)
    private Organization OrganizationIncident.organization;
    
    @ManyToOne
    @JoinColumn(name = "respondent", referencedColumnName = "id", nullable = false, insertable = false, updatable = false)
    private Respondent OrganizationIncident.respondent;
    
    @Column(name = "impact", columnDefinition = "TINYINT")
    @NotNull
    private Short OrganizationIncident.impact;
    
    @Column(name = "description", columnDefinition = "TEXT")
    private String OrganizationIncident.description;
    
    @Column(name = "plannedFor", columnDefinition = "BIT")
    private Boolean OrganizationIncident.plannedFor;
    
    @Column(name = "trained", columnDefinition = "BIT")
    private Boolean OrganizationIncident.trained;
    
    public Set<IncidentCapability> OrganizationIncident.getIncidentCapabilities() {
        return incidentCapabilities;
    }
    
    public void OrganizationIncident.setIncidentCapabilities(Set<IncidentCapability> incidentCapabilities) {
        this.incidentCapabilities = incidentCapabilities;
    }
    
    public Set<IncidentMissionArea> OrganizationIncident.getIncidentMissionAreas() {
        return incidentMissionAreas;
    }
    
    public void OrganizationIncident.setIncidentMissionAreas(Set<IncidentMissionArea> incidentMissionAreas) {
        this.incidentMissionAreas = incidentMissionAreas;
    }
    
    public Set<IncidentSystem> OrganizationIncident.getIncidentSystems() {
        return incidentSystems;
    }
    
    public void OrganizationIncident.setIncidentSystems(Set<IncidentSystem> incidentSystems) {
        this.incidentSystems = incidentSystems;
    }
    
    public Set<IncidentTask> OrganizationIncident.getIncidentTasks() {
        return incidentTasks;
    }
    
    public void OrganizationIncident.setIncidentTasks(Set<IncidentTask> incidentTasks) {
        this.incidentTasks = incidentTasks;
    }
    
    public Set<Sharing> OrganizationIncident.getSharings() {
        return sharings;
    }
    
    public void OrganizationIncident.setSharings(Set<Sharing> sharings) {
        this.sharings = sharings;
    }
    
    public Incident OrganizationIncident.getIncident() {
        return incident;
    }
    
    public void OrganizationIncident.setIncident(Incident incident) {
        this.incident = incident;
    }
    
    public Organization OrganizationIncident.getOrganization() {
        return organization;
    }
    
    public void OrganizationIncident.setOrganization(Organization organization) {
        this.organization = organization;
    }
    
    public Respondent OrganizationIncident.getRespondent() {
        return respondent;
    }
    
    public void OrganizationIncident.setRespondent(Respondent respondent) {
        this.respondent = respondent;
    }
    
    public Short OrganizationIncident.getImpact() {
        return impact;
    }
    
    public void OrganizationIncident.setImpact(Short impact) {
        this.impact = impact;
    }
    
    public String OrganizationIncident.getDescription() {
        return description;
    }
    
    public void OrganizationIncident.setDescription(String description) {
        this.description = description;
    }
    
    public Boolean OrganizationIncident.getPlannedFor() {
        return plannedFor;
    }
    
    public void OrganizationIncident.setPlannedFor(Boolean plannedFor) {
        this.plannedFor = plannedFor;
    }
    
    public Boolean OrganizationIncident.getTrained() {
        return trained;
    }
    
    public void OrganizationIncident.setTrained(Boolean trained) {
        this.trained = trained;
    }
    
}
