// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mindalliance.sb.mvc;

import com.mindalliance.sb.model.Organization;
import com.mindalliance.sb.model.Subcommittee;
import com.mindalliance.sb.mvc.ApplicationConversionServiceFactoryBean;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.core.convert.converter.Converter;
import org.springframework.format.FormatterRegistry;

privileged aspect ApplicationConversionServiceFactoryBean_Roo_ConversionService {
    
    declare @type: ApplicationConversionServiceFactoryBean: @Configurable;
    
    public Converter<Organization, String> ApplicationConversionServiceFactoryBean.getOrganizationToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.mindalliance.sb.model.Organization, java.lang.String>() {
            public String convert(Organization organization) {
                return new StringBuilder().append(organization.getName()).append(' ').append(organization.getAcronym()).append(' ').append(organization.getUrl()).toString();
            }
        };
    }
    
    public Converter<Integer, Organization> ApplicationConversionServiceFactoryBean.getIdToOrganizationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Integer, com.mindalliance.sb.model.Organization>() {
            public com.mindalliance.sb.model.Organization convert(java.lang.Integer id) {
                return Organization.findOrganization(id);
            }
        };
    }
    
    public Converter<String, Organization> ApplicationConversionServiceFactoryBean.getStringToOrganizationConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.mindalliance.sb.model.Organization>() {
            public com.mindalliance.sb.model.Organization convert(String id) {
                return getObject().convert(getObject().convert(id, Integer.class), Organization.class);
            }
        };
    }
    
    public Converter<Subcommittee, String> ApplicationConversionServiceFactoryBean.getSubcommitteeToStringConverter() {
        return new org.springframework.core.convert.converter.Converter<com.mindalliance.sb.model.Subcommittee, java.lang.String>() {
            public String convert(Subcommittee subcommittee) {
                return new StringBuilder().append(subcommittee.getName()).toString();
            }
        };
    }
    
    public Converter<Integer, Subcommittee> ApplicationConversionServiceFactoryBean.getIdToSubcommitteeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.Integer, com.mindalliance.sb.model.Subcommittee>() {
            public com.mindalliance.sb.model.Subcommittee convert(java.lang.Integer id) {
                return Subcommittee.findSubcommittee(id);
            }
        };
    }
    
    public Converter<String, Subcommittee> ApplicationConversionServiceFactoryBean.getStringToSubcommitteeConverter() {
        return new org.springframework.core.convert.converter.Converter<java.lang.String, com.mindalliance.sb.model.Subcommittee>() {
            public com.mindalliance.sb.model.Subcommittee convert(String id) {
                return getObject().convert(getObject().convert(id, Integer.class), Subcommittee.class);
            }
        };
    }
    
    public void ApplicationConversionServiceFactoryBean.installLabelConverters(FormatterRegistry registry) {
        registry.addConverter(getOrganizationToStringConverter());
        registry.addConverter(getIdToOrganizationConverter());
        registry.addConverter(getStringToOrganizationConverter());
        registry.addConverter(getSubcommitteeToStringConverter());
        registry.addConverter(getIdToSubcommitteeConverter());
        registry.addConverter(getStringToSubcommitteeConverter());
    }
    
    public void ApplicationConversionServiceFactoryBean.afterPropertiesSet() {
        super.afterPropertiesSet();
        installLabelConverters(getObject());
    }
    
}
