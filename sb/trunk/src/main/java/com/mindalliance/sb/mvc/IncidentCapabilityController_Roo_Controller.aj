// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.mindalliance.sb.mvc;

import com.mindalliance.sb.model.CoreCapability;
import com.mindalliance.sb.model.IncidentCapability;
import com.mindalliance.sb.model.IncidentCapabilityPK;
import com.mindalliance.sb.model.OrganizationIncident;
import com.mindalliance.sb.mvc.IncidentCapabilityController;
import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.convert.ConversionService;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect IncidentCapabilityController_Roo_Controller {
    
    private ConversionService IncidentCapabilityController.conversionService;
    
    @Autowired
    public IncidentCapabilityController.new(ConversionService conversionService) {
        super();
        this.conversionService = conversionService;
    }

    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String IncidentCapabilityController.create(@Valid IncidentCapability incidentCapability, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, incidentCapability);
            return "lists/incidentcapabilitys/create";
        }
        uiModel.asMap().clear();
        incidentCapability.persist();
        return "redirect:/lists/incidentcapabilitys/" + encodeUrlPathSegment(conversionService.convert(incidentCapability.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String IncidentCapabilityController.createForm(Model uiModel) {
        populateEditForm(uiModel, new IncidentCapability());
        return "lists/incidentcapabilitys/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String IncidentCapabilityController.show(@PathVariable("id") IncidentCapabilityPK id, Model uiModel) {
        uiModel.addAttribute("incidentcapability", IncidentCapability.findIncidentCapability(id));
        uiModel.addAttribute("itemId", conversionService.convert(id, String.class));
        return "lists/incidentcapabilitys/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String IncidentCapabilityController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("incidentcapabilitys", IncidentCapability.findIncidentCapabilityEntries(firstResult, sizeNo));
            float nrOfPages = (float) IncidentCapability.countIncidentCapabilitys() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("incidentcapabilitys", IncidentCapability.findAllIncidentCapabilitys());
        }
        return "lists/incidentcapabilitys/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String IncidentCapabilityController.update(@Valid IncidentCapability incidentCapability, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, incidentCapability);
            return "lists/incidentcapabilitys/update";
        }
        uiModel.asMap().clear();
        incidentCapability.merge();
        return "redirect:/lists/incidentcapabilitys/" + encodeUrlPathSegment(conversionService.convert(incidentCapability.getId(), String.class), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String IncidentCapabilityController.updateForm(@PathVariable("id") IncidentCapabilityPK id, Model uiModel) {
        populateEditForm(uiModel, IncidentCapability.findIncidentCapability(id));
        return "lists/incidentcapabilitys/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String IncidentCapabilityController.delete(@PathVariable("id") IncidentCapabilityPK id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        IncidentCapability incidentCapability = IncidentCapability.findIncidentCapability(id);
        incidentCapability.remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/lists/incidentcapabilitys";
    }
    
    void IncidentCapabilityController.populateEditForm(Model uiModel, IncidentCapability incidentCapability) {
        uiModel.addAttribute("incidentCapability", incidentCapability);
        uiModel.addAttribute("corecapabilitys", CoreCapability.findAllCoreCapabilitys());
        uiModel.addAttribute("organizationincidents", OrganizationIncident.findAllOrganizationIncidents());
    }
    
    String IncidentCapabilityController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
