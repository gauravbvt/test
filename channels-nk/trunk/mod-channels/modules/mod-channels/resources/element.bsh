import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;

main() {
	method = (((IAspectString)context.sourceAspect("literal:method", IAspectString.class)).getString());

	response = context.createResponseFrom(new StringAspect("<foo>bleah</foo>"));
	type=context.getThisRequest().getArgument("type");
	System.out.println("type: " + type );
	System.out.println("URI: " + context.getThisRequest().getURI());
	if(type != null) {
		// regular POST to /channels/<elementClass>
		if(context.exists("this:param:param")) {
			try {
				element=context.sourceAspect("this:param:param", IAspectString.class);
			} catch(Throwable d) {
				d.printStackTrace();
			}
			req=context.createSubRequest("active:channels_data_createElement");
			req.addArgument("doc", element);
			req.addArgument("kind", new StringAspect("<string>" + type + "</string>"));
			try {
				out=context.issueSubRequest(req);
			} catch( Throwable t ) {
				out = new StringAspect("<error> Error creating " + type + "</error>");
			}
			response=context.createResponseFrom(out);		

		} else {
			out = new StringAspect("<error> Error creating " + type + "</error>");
		}

	} else {
		// particular element manipulation
		params = getParams(context);

		if(params != null) {
			id=params.getValue("id");			

			switch(method) {
				case "GET":
				req=context.createSubRequest("active:channels_data_getElement");
				req.addArgument("id", new StringAspect("<id>" + id + "</id>"));
				out = null;

				try {
					out=context.issueSubRequest(req);
				} catch(Throwable t) {
					out=new StringAspect("<error> Could not find element with id=" + id + "</error>");
				}

				response=context.createResponseFrom(out);
				break;
				case "POST":
				method = params.getValue("method");

				if(method!=null) {
					switch(method) {
						case "DELETE":
						req=context.createSubRequest("active:channels_data_deleteElement");
						req.addArgument("id", new StringAspect("<id>" + id + "</id>"));
						out=null;
						try {
							out=context.issueSubRequest(req);
						} catch(Throwable t) {
							out=new StringAspect("<error> Could not delete element with id=" + id + "</error>");						
						}

						response=context.createResponseFrom(out);
						break;
						case "PUT":
						break;
						default:
						// TODO: Handle error
						System.out.println("We need to handle the case of unexpected method");
						break;
					}
				} else {
					// TODO: Handle Error
					System.out.println("We need to handle the case of missing method");
				}
				break;
				default :
				// TODO: Handle Error
				break;
			}
		}

	}

	response.setMimeType("text/xml");
	context.setResponse(response);
}

getParams(context) {
	params = null;
	if(context.exists("this:param:param2")) {
		params = (IAspectNVP) context.sourceAspect("this:param:param2", IAspectNVP.class);
		} else if(context.exists("this:param:param")) {
			params = (IAspectNVP) context.sourceAspect("this:param:param", IAspectNVP.class);
		}

	return params;
}