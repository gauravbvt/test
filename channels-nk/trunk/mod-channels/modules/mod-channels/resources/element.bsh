import org.ten60.netkernel.layer1.representation.*;
import org.ten60.netkernel.xml.representation.*;
import com.ten60.netkernel.urii.aspect.*;

main() {
	method = (((IAspectString)context.sourceAspect("literal:method", IAspectString.class)).getString());
	response = context.createResponseFrom(new StringAspect("<error>This is a default error message</error>"));
	
	type=context.getThisRequest().getArgument("type");

	if(type != null) {
		// regular POST to /channels/<elementClass>
		if(context.exists("this:param:param")) {
			try {
				element=context.sourceAspect("this:param:param", IAspectString.class);
				req=context.createSubRequest("active:channels_data_createElement");
				req.addArgument("doc", element);
				req.addArgument("kind", new StringAspect("<string>" + type + "</string>"));				
				out=context.issueSubRequest(req);
			} catch(Throwable d) {
				out = new StringAspect("<error> Error creating " + type + "</error>");				
			}

			response=context.createResponseFrom(out);		

		} else {
			out = new StringAspect("<error> Error creating " + type + ". No element POSTed.</error>");
		}

	} else {
		// particular element manipulation
		params = getParams(context);

		if(params != null) {
			id=params.getValue("id");			

			switch(method) {
				case "GET":
				req=context.createSubRequest("active:channels_data_getElement");
				req.addArgument("id", "id:" + id);
				if (params.getNames().contains("namesListed")) { 
					req.addArgument("namesListed", params.getValue("namesListed")); // value does not matter
				}
				out = null;

				try {
					out=context.issueSubRequest(req);
					req=context.createSubRequest("active:attachGoldenThread");
					req.addArgument("operand", out);
					req.addArgument("param", "gt:" + id );
					out=context.issueSubRequest(req);
				} catch(Throwable t) {
					out=new StringAspect("<error> Could not find element with id=" + id + "</error>");
				}

				response=context.createResponseFrom(out);

				break;
				case "POST":
				method = params.getValue("method");

				if(method!=null) {
					switch(method) {
						case "DELETE":
						req=context.createSubRequest("active:channels_data_deleteElement");
						req.addArgument("id", new StringAspect("<id>" + id + "</id>"));
						out=null;
						try {
							out=context.issueSubRequest(req);
						} catch(Throwable t) {
							out=new StringAspect("<error> Could not delete element with id=" + id + "</error>");						
						}

						response=context.createResponseFrom(out);
						break;
						case "PUT":
						out=null;
						if(context.exists("this:param:param")) {
							try {
								element=context.sourceAspect("this:param:param", IAspectString.class);
								req=context.createSubRequest("active:channels_data_updateElement");								
								req.addArgument("doc", element);
								req.addArgument("id", new StringAspect("<id>" + id + "</id>"));								
								out=context.issueSubRequest(req);
							} catch(Throwable d) {
								out=new StringAspect("<error> Could not update element with id=" + id + "</error>");														
							}
						} else {
							out=new StringAspect("<error> Missing element body for id = " + id +"</error>" );
						}
						response=context.createResponseFrom(out);
						break;
						default:
						// TODO: Handle error
						System.out.println("We need to handle the case of unexpected method");
						break;
					}
				} else {
					// TODO: Handle Error
					System.out.println("We need to handle the case of missing method");
				}
				
				break;
				default :
				// TODO: Handle Error
				break;
			}
		}

	}

	response.setMimeType("text/xml");
	context.setResponse(response);
}

getParams(context) {
	params = null;
	if(context.exists("this:param:param2")) {
	    params = (IAspectNVP) context.sourceAspect("this:param:param2", IAspectNVP.class);
	} else if(context.exists("this:param:param")) {
		params = (IAspectNVP) context.sourceAspect("this:param:param", IAspectNVP.class);
	}

	return params;
}