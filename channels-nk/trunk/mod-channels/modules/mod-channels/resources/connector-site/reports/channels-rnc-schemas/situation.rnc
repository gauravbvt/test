# SITUATION

default namespace = "http://www.mindalliance.com/schemas/channels"
namespace rng = "http://relaxng.org/ns/structure/1.0"
datatypes xsd = "http://www.w3.org/2001/XMLSchema-datatypes"

include "channels.rnc" 

items |= element items {
    ownership
    & bio*
    & privacy*
    & trustedGroup*
    & clearance*
    & contactInfo*
    & availability*
    & event*
    & task*
    & infoNeed*
    & newInfo*
    & sourceRequirement*
    & sharing*
    & message*
    & commitment*
    & regulation*
    & recommendation*
    }
## Ownership of a item. For Connector.
ownership =
    element ownership {
        item
        & element item { id }
        & element owner { userid } # userid
        }
## Role-based privacy set by user in terms of group of trusted users. For Connector.
privacy = element privacy {
    attribute hideName { xsd:boolean }
    & attribute showContactInfo { xsd:boolean }
    & item
    & element role { id }
    & (element all { empty }  | element trustedGroup { id }+ )
    }
## Group of users trusted by a user. For Connector.
trustedGroup = element trustedGroup {
    item
    & element name { text }
    & element person { id }*
    }
## A person's bio
bio = 
    element bio {
        item
        & element person { id }
        & element background {description}?
        & element expertise {description}?
        }
## A person's clearance
clearance =
    element clearance {
        item
        & element person { id }
        & element clearanceLevel { id }
        & element expiration { xsd:dateTime }
    }
## Contact information
contactInfo = element contactInfo {
    item
    & (
        element email {text}
        | element phone {
            element type {"voice" | "cell" | "fax"}*
            & element number {text}
            }
        | element imAndVoip {
            element type {"voip" | "chat" | "both"}
            & element provider {text}
            & element handle {text}
            }
        )
}
## TIme period(s) when someone is available in a given role
availability = element availability {
    item
    & element role { id }
    & element type {"24/7" | "business hours" | "other" }
    & recurrentPeriod* # there must be no overlap between time periods
}
## An event either from "outside" (incident) or related to a task or sharing    
event = 
    element event {
        (incident | taskEvent | sharingEvent)
       & element when {xsd:dateTime} 
    }
## An outside event
incident =
    element incident {
        description
        & element where {location}
    }
## A state change in a task    
taskEvent =
    element taskEvent {
        element task { id }
        & element changedTo {"planned" | "started" | "completed" | "cancelled"}
    }
## A state change in a sharing    
sharingEvent =
    element sharingEvent {
        element sharing { id }
        & element changedTo {"started" | "completed"}
    }
## Something being or to be done by someone in a given role
task = element task {
    item
    & element status {"planned" | "started" | "completed" | "cancelled"}
    & description
    & element role {id} # in what capacity - if no role defined for user's profile then no task can be created
    & element startDate {xsd:dateTime}? # no start date or end date = a continuous task
    & element endDate {xsd:dateTime}?
    & element location {location}?
    & element triggerEvent {id}*
    & element effectEvent {id}*
}
## Information needed by someone doing a task
infoNeed = element infoNeed {
    item
    & element status {"active" | "closed"}
    & information
    & element during {timeWindow}? # Time scope of the information
    & element where {location}? # Spatial scope of the information
    & element neededBefore {xsd:dateTime}? # must not exceed task end date, if any
    & element task {id}  # task IS required, however vague or catchall (e.g. "doing my job")
    & element criticality {level}
    }
## Information generated by someone doing  task   
newInfo = element newInfo {
    item
    & information
    & element status {"ready" | "pending" | "abandonned"}
    & element task {id} # task that produced it (required)
}
## Specification of an acceptable source to satisfy an infoNeed
sourceRequirement  = element sourceRequirement {
    item
    & element infoNeed {id}
    & (
        element organization {id}
        | (description & element jurisdication {location})
        )
}
## A role that accepts to be a source for an info need
sharing = element sharing {
    item 
    & element infoNeed {id}
    & element sourceRole {id} # a role
    & element sourceRequirement { id }* # requirements satisfied
    & element status {"suggested" | "started" | "completed"}
}
## A message that's part of a sharing
message = element message {
    item # user is either the one owning the sharing or the infoNeed addressed by the sharing
    & element sharing { id }
    & element when { xsd:dateTime }
    & element content {text}
}
## A commitment to deliver needed information, as part of a sharing
commitment = element commitment {
    item
    & element sharing {id} 
    & information # what information is promised
    & element status {"active" | "abandonned" | "completed"}
    & element eta {xsd:dateTime} # ETA
    & element task { id }* # tasks started to make good on commitment
}
## A potential application inferred from a policy on a source requirement, task, sharing 
regulation = element regulation {
    analysisItem
    & element constraint {"prohibit" | "obligate" | "restrict"} # the dictate of the policy MAY be to prohibit, obligate or restrict sharing or task
    & element edict {id} # policy edict from the model
}
## A  recommendation inferred about an item
recommendation = element recommendation {
    analysisItem
    & element content { text }
}




