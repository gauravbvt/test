<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:common="com.mindalliance.channels.common.view.*"
    implements="com.mindalliance.channels.common.view.IEditor">
	
	<mx:Script>
		<![CDATA[
			import com.mindalliance.channels.vo.PersonVO;
			import mx.collections.ArrayCollection;
			import mx.core.IFlexDisplayObject;
			import mx.managers.PopUpManager;
			import com.mindalliance.channels.people.events.*;
            import com.mindalliance.channels.common.events.*;
            
            import com.mindalliance.channels.model.EditorModel;
            import com.mindalliance.channels.model.ElementModel;
            import com.mindalliance.channels.vo.common.ElementVO;
            import com.mindalliance.channels.util.CairngormHelper;
            import com.mindalliance.channels.model.ChannelsModelLocator;
			
            [Bindable]
            public function get model() : EditorModel 
            {
                return _editorModel;
            }
            
            public function set model(model : EditorModel) : void 
            {
                this._editorModel = model;
            }
            public var _editorModel : EditorModel = ChannelsModelLocator.getInstance().getEditorModel();
            
            [Bindable]
            private var elementModel : ElementModel;
            
            [Bindable]
            private var roleList : ArrayCollection;
            
            [Bindable]
            private var edited : PersonVO;
			
			private function switchToEditState():void {
				currentState = 'EditState' ;
			}
			
			private function confirmEdit():void {
                update();
				currentState = '' ;
			}
			
			private function cancelEdit():void {
                
                CairngormHelper.fireEvent( new GetElementEvent(model.id,model));
				currentState = '' ;
			}
			
			private function chooseRoles():void {

				var rc:RoleChooser = (PopUpManager.createPopUp(listRoles,RoleChooser,false) as RoleChooser);
		        rc.filtered=edited.roles;
                rc.processSelected=function(selected : ArrayCollection) : void {
                    for each(var el : ElementVO in selected) {
                        edited.roles.addItem(el);   
                        queueUpdate();
                    }
                }		
				var p:Point = new Point(listRoles.x, listRoles.y) ;
				p = listRoles.localToGlobal(p) ;
				rc.x = p.x + listRoles.width + 5 ;
				rc.y = p.y ;
			}
			
			private function update() :void {
                
                CairngormHelper.fireEvent( new UpdatePersonEvent(model,
                                                                txtFirstName.text,
                                                                txtLastName.text,
                                                                edited.photo,
                                                                txtEmail.text,
                                                                txtOfficePhone.text,                 
                                                                txtCellPhone.text,
                                                                edited.address,
                                                                edited.roles,
                                                                edited.user));   
            }
            
            private function queueUpdate() : void {
                CairngormHelper.queueUpdate(model);
            }
			
			
			private function removeRole() : void {
				if (listRoles.selectedIndex >=0) {
				    edited.roles.removeItemAt(listRoles.selectedIndex);
				    queueUpdate();
				}
			}
			
		]]>
	</mx:Script>
    
    <mx:Binding source="model.getElementModel(model.id)" destination="elementModel"/>
    <mx:Binding source="(elementModel.data as PersonVO)" destination="edited"/>
    <mx:Binding source="model.getElementListModel('roles').data" destination="roleList"/>
    
    <mx:states>
    	<mx:State name="EditState">
    		<mx:AddChild relativeTo="{viewEditStateChangeFormItem}" position="after">
    			<common:HintFieldRequiredFormItem/>
    		</mx:AddChild>
    		<mx:AddChild relativeTo="{listRoles}" position="after">
				<mx:HBox>
					<common:AddButton click="chooseRoles()" enabled="{edited != null}"/>
					<common:RemoveButton enabled="{listRoles.selectedItems.length > 0}" click="removeRole()"/>
					
				</mx:HBox>
    		</mx:AddChild>
    		<mx:SetProperty target="{viewEditStateChangeFormItem}" name="currentState" value="EditState"/>
    		<mx:SetProperty target="{txtFirstName}" name="editable" value="true"/>
    		<mx:SetProperty target="{txtEmail}" name="editable" value="true"/>
    		<mx:SetProperty target="{formitem1}" name="required" value="true"/>
    		<mx:SetProperty target="{formitem2}" name="required" value="true"/>
    		<mx:SetProperty target="{formitem3}" name="required" value="true"/>
    		<mx:SetProperty target="{formitem4}" name="required" value="true"/>
    		<mx:SetProperty target="{formitem5}" name="required" value="true"/>
		</mx:State>
	</mx:states>
	
    <mx:transitions>
    	<common:ViewEditStateTransition fromState="*" toState="*" targets="{[this]}"/>
    </mx:transitions>
    
    <mx:Style source="../../../../../assets/styles/FormStyles.css"/>
    
    <common:ViewEditStateChangeFormItem id="viewEditStateChangeFormItem"
    	btnEditClickHandler="{switchToEditState}"
    	confirmEditHandler="{confirmEdit}"
    	cancelEditHandler="{cancelEdit}"/>

	<mx:FormItem label="First name" id="formitem1" width="100%">
		<mx:TextInput width="100%" id="txtFirstName" editable="{currentState=='EditState'}" text="{edited.firstName}" change="queueUpdate()"/>
	</mx:FormItem>
	<mx:FormItem label="Last name" id="formitem2" width="100%">
		<mx:TextInput width="100%" id="txtLastName" editable="{currentState=='EditState'}" text="{edited.lastName}" change="queueUpdate()"/>
	</mx:FormItem>
	<mx:FormItem label="Email" id="formitem3" width="100%">
		<mx:TextInput width="100%" id="txtEmail" editable="{currentState=='EditState'}" text="{edited.email}" change="queueUpdate()"/>
	</mx:FormItem>
	<mx:FormItem label="Office phone" id="formitem5" width="100%">
		<mx:TextInput width="100%" id="txtOfficePhone" editable="{currentState=='EditState'}" text="{edited.officePhone}" change="queueUpdate()"/>
	</mx:FormItem>
	<mx:FormItem label="Cell phone" width="100%">
		<mx:TextInput width="100%" id="txtCellPhone" editable="{currentState=='EditState'}" text="{edited.cellPhone}" change="queueUpdate()"/>
	</mx:FormItem>
	<mx:FormItem label="Roles" id="formitem4" width="100%">
		<mx:List id="listRoles" editable="false" dataProvider="{edited.roles}" labelField="name"  width="100%"/>
	</mx:FormItem>
</mx:Form>
