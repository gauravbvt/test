<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
	showCloseButton="true"
	close="closeBrowser()"
	mouseDownOutside="closeBrowser()"
	creationComplete="initEditor()"
	xmlns:search="com.mindalliance.channels.search.view.*"
	xmlns:ui="com.mindalliance.channels.view.*"
	xmlns:common="com.mindalliance.channels.common.view.*">

	<mx:states>
		<mx:State name="DashboardState">
			<mx:SetProperty name="title" value="Manage Projects and Scenarios"/>
			<mx:SetProperty name="showCloseButton" value="false"/>
			<mx:SetEventHandler name="close"/>
			<mx:SetEventHandler name="mouseDownOutside"/>
		</mx:State>
	</mx:states>
	
	<mx:Script>
		<![CDATA[
			import com.mindalliance.channels.model.ElementModel;
			import com.mindalliance.channels.model.EditorModel;
			import com.mindalliance.channels.common.events.DeleteElementEvent;
			import com.mindalliance.channels.common.events.QueueUpdateEvent;
			import com.mindalliance.channels.common.events.GetElementEvent;
			import com.mindalliance.channels.model.ElementListModel;
			import com.mindalliance.channels.util.ElementHelper;
			import mx.events.ListEventReason;
			import mx.events.ListEvent;
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.events.CollectionEventKind;
			import mx.events.CollectionEvent;
			import com.mindalliance.channels.util.CairngormHelper;
			import com.mindalliance.channels.vo.common.ElementVO;
			import com.mindalliance.channels.vo.ProjectVO;
			import com.mindalliance.channels.vo.ScenarioVO;
			import com.mindalliance.channels.model.PermissionModel;
        	import com.mindalliance.channels.model.ChannelsModelLocator;
        	import com.mindalliance.channels.model.application.ProjectScenarioBrowserModel;
			import com.mindalliance.channels.application.events.*;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.adobe.cairngorm.control.CairngormEvent;
			import com.mindalliance.channels.util.ViewUtils;
			import mx.managers.PopUpManager;	
			import mx.controls.Alert;
		
			[Bindable]
			private var channelsModel:ChannelsModelLocator = ChannelsModelLocator.getInstance() ;
			
            [Bindable]
 	        private var model : ProjectScenarioBrowserModel = ChannelsModelLocator.getInstance().projectScenarioBrowserModel;
 	        
 	        [Bindable]
 	        private var permissions : PermissionModel = ChannelsModelLocator.getInstance().permissionModel;

 	        [Bindable]
 	        private var currentScenarioSelected:Boolean ;
 	        
 	        [Bindable]
 	        private var currentProjectSelected:Boolean ;
 	        
            [Bindable] private var projectListModel : ElementListModel = channelsModel.getElementListModel('projects');
            [Bindable] private var editedProjectModel : ElementModel;
            [Bindable] private var editedProject : ProjectVO;
            [Bindable] private var scenarioListModel : ElementListModel = channelsModel.getElementListModel('scenarios');
            [Bindable] private var editedScenarioModel : ElementModel;
            [Bindable] private var editedScenario : ScenarioVO;
 	        
 	        private function initEditor() : void {
 	        	//BindingUtils.bindSetter(projectListInitialized, projectListModel, 'data') ;
 	        	//BindingUtils.bindSetter(scenarioListInitialized, scenarioListModel, 'data') ;
 	        	
                projectListModel.data.addEventListener(CollectionEvent.COLLECTION_CHANGE, projectListChanged) ;
                
                scenarioListModel.data.addEventListener(CollectionEvent.COLLECTION_CHANGE, scenarioListChanged) ;
 	        	getProjectList();
 	        }
 	        
 	        private function projectListInitialized(value:Object):void {
 	        	if (projectListModel.data) {
	 	        	projectListModel.data.addEventListener(CollectionEvent.COLLECTION_CHANGE, projectListChanged) ;
					if (channelsModel.currentProject)
						setSelectedCurrentProject() ;
					else	
	 	        		projectListChanged(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, false, CollectionEventKind.RESET)) ;
	 	        }
 	        }
 	        
 	        private function setSelectedCurrentProject():void {
				listProjects.selectedIndex = ElementHelper.findElementIndexById(channelsModel.currentProject.id, projectListModel.data) ; 	 
				dispatchListChange(listProjects) ;
 	        }
 	        
 	        private function setSelectedCurrentScenario():void {
				listScenarios.selectedIndex = ElementHelper.findElementIndexById(ChannelsModelLocator.getInstance().currentScenario.id, scenarioListModel.data) ;
 	        	dispatchListChange(listScenarios) ;
 	        }
 	        
 	        private function scenarioListInitialized(value:Object):void {
 	        	if (scenarioListModel.data) {
	 	        	scenarioListModel.data.addEventListener(CollectionEvent.COLLECTION_CHANGE, scenarioListChanged) ;
					if (channelsModel.currentScenario)
						setSelectedCurrentScenario() ;
					else
	 	        		scenarioListChanged(new CollectionEvent(CollectionEvent.COLLECTION_CHANGE, false, false, CollectionEventKind.RESET)) ;
	 	        }
 	        }
 	        
 	        private function dispatchListChange(list:List):void {
 	        	list.dispatchEvent(new ListEvent(ListEvent.CHANGE)) ;
 	        }
 	        
 	        private function projectListChanged(event:Event):void {
 	        	var colEvent:CollectionEvent = event as CollectionEvent ;
 	        	if (!colEvent)
 	        		return ;	        		
 	        	switch (colEvent.kind) {
         			case CollectionEventKind.ADD:
 	        			listProjects.selectedIndex = projectListModel.data.length - 1 ;
 	        			dispatchListChange(listProjects) ;
 	        		break ;
 	        		case CollectionEventKind.REMOVE:
 	        			if (listProjects.selectedItems.length == 0)
 	        				listProjects.selectedIndex = projectListModel.data.length - 1 ;
 	        			dispatchListChange(listProjects) ;
 	        		break ;
 	        		case CollectionEventKind.RESET:
 	        			
 	        			if (channelsModel.currentProject != null)
 	        				setSelectedCurrentProject() ;
 	        			else
 	        				listProjects.selectedIndex = 0 ;
 	        			dispatchListChange(listProjects) ;
 	        		break ;
 	        	}
 	        }
 	        
 	        private function scenarioListChanged(event:Event):void {
 	        	var colEvent:CollectionEvent = event as CollectionEvent ;
 	        	if (!colEvent)
 	        		return ;
 	        	switch (colEvent.kind) {
 	        		case CollectionEventKind.ADD:
 	        			listScenarios.selectedIndex = scenarioListModel.data.length - 1 ;
 	        			dispatchListChange(listScenarios) ;
 	        		break ;
 	        		case CollectionEventKind.REMOVE:
 	        			if (listScenarios.selectedItems.length == 0)
 	        				listScenarios.selectedIndex = scenarioListModel.data.length - 1 ;
 	        		break ;
 	        		case CollectionEventKind.RESET:
 	        			if (channelsModel.currentScenario != null)
 	        				setSelectedCurrentScenario() ;
 	        			else if (scenarioListModel.data.length > 0) {
 	        				listScenarios.selectedIndex = 0 ;
 	        				
 	        			}
 	        			dispatchListChange(listScenarios) ;
 	        		break ;
 	        	}
 	        }
 	        
 	        
 	        private function getProjectList() : void
 	        {
 	        	CairngormEventDispatcher.getInstance().dispatchEvent( new GetProjectListEvent() );
 	        }
 	        
 	        private function selectProject( ) : void
 	        {
 	        	var selected : Object = listProjects.selectedItem;
 	        	var id : String = (selected == null ? null : selected.id);
 	        	CairngormHelper.fireEvent( new GetElementEvent(id, model.projectModel.editorModel));
 	        	CairngormHelper.fireEvent( new GetScenarioListEvent( id ) );
 	        	CairngormHelper.fireEvent( new GetElementEvent(null, model.scenarioModel.editorModel));
 	        }
 	        
 	        private function addProject(name : String) : void 
 	        {
				if (name != null) {
					CairngormHelper.fireEvent(new CreateProjectEvent(name));
				}
 	        }
 	        
 	        private function removeProject() : void
 	        {
 	        	CairngormHelper.fireEvent(new DeleteElementEvent((listProjects.selectedItem as ElementVO).id));
 	        }
 	        
 	        private function queueProjectUpdate() : void
 	        {
 	        	CairngormHelper.fireEvent(new QueueUpdateEvent(model.projectModel.editorModel));
 	        }
 	        
 	        private function updateProject(event : FocusEvent = null) : void
 	        {
         		CairngormHelper.fireEvent(new UpdateProjectEvent(model.projectModel.editorModel,
         														txtProjectName.text,
         														txtProjectDescription.text,
         														editedProject.manager));	
 	        }
 	        
 	        private function updateScenario(event : FocusEvent = null) : void
 	        {
         		CairngormHelper.fireEvent(new UpdateScenarioEvent(model.scenarioModel.editorModel,
 																	txtScenarioName.text,
 																	txtScenarioDescription.text,
 																	listProjects.selectedItem as ElementVO));	
 	        }
 	        
 	        private function selectScenario() : void
 	        {
 	        	var selected : Object = listScenarios.selectedItem;
 	        	var id : String = (selected == null ? null : selected.id);
 	        	
 	        	CairngormHelper.fireEvent( new GetElementEvent( id,model.scenarioModel.editorModel) );
 	        }

 	        private function removeScenario() : void
 	        {
 	        	
 	        	CairngormHelper.fireEvent(new DeleteElementEvent((listScenarios.selectedItem as ElementVO).id));
 	        }
 	        
 	        private function addScenario(name : String) : void
 	        {
 	        	if (name != null) {
					CairngormHelper.fireEvent(new CreateScenarioEvent(name, model.projectModel.editorModel.id));
				}	
 	        }
 	        private function queueScenarioUpdate() : void
 	        {
 	        	CairngormHelper.fireEvent(new QueueUpdateEvent(model.scenarioModel.editorModel));
 	        }
 	        private function loadScenario() : void 
 	        {
 	        	CairngormHelper.fireEvent( new LoadScenarioEvent(model.scenarioModel.editorModel.id) );
 	        	closeBrowser() ;
 	        }
 	         	        
 	        private function closeBrowser():void {
 	        	if (this.isPopUp)
	 	        	PopUpManager.removePopUp(this);
 	        }
 	        
		]]>
	</mx:Script>
		
	<mx:Binding 
		source="channelsModel.currentScenario &amp;&amp; 
				model.scenarioModel.editorModel.id &amp;&amp; 
				(channelsModel.currentScenario.id == model.scenarioModel.editorModel.id)" 
		destination="currentScenarioSelected"/>
	<mx:Binding
		source="channelsModel.currentProject &amp;&amp; 
				model.projectModel.editorModel.id &amp;&amp; 
				(channelsModel.currentProject.id == model.projectModel.editorModel.id)"
		destination="currentProjectSelected"/>
		
    <mx:Binding source="channelsModel.getElementModel(model.projectModel.editorModel.id)" destination="editedProjectModel"/>
    <mx:Binding source="(editedProjectModel.data as ProjectVO)" destination="editedProject"/>
    <mx:Binding source="channelsModel.getElementModel(model.scenarioModel.editorModel.id)" destination="editedScenarioModel"/>
    <mx:Binding source="(editedScenarioModel.data as ScenarioVO)" destination="editedScenario"/>

	<mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off" >
		<mx:HBox horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:VBox width="50%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:Label text="Projects" fontWeight="bold"/>
				<search:StandardSearchBox width="100%" visible="false" includeInLayout="false" id="searchBoxProject"/>
				<mx:VBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:List id="listProjects" dataProvider="{projectListModel.data}" labelField="name" width="100%" allowMultipleSelection="false" change="selectProject()"/>
					<mx:HBox>
						<common:AddButton visible="{permissions.canAddProject}" click="ViewUtils.getUserTextInput(this, addProject, 'Enter Project Name', true)"/>
						<common:RemoveButton visible="{permissions.canRemoveProject}" 
							click="removeProject()"
							toolTip="{currentProjectSelected ? 'cannot delete currently loaded project' : null}"
							enabled="{model.projectModel.editorModel.id &amp;&amp; !currentProjectSelected}"/>
					</mx:HBox>
				</mx:VBox>
				<mx:Form enabled="{model.projectModel.editorModel.id != null}" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:FormItem label="Name" width="100%">
						<mx:TextInput id="txtProjectName" text="{editedProject.name}" change="queueProjectUpdate()" focusOut="updateProject()"/>
					</mx:FormItem>
					<mx:FormItem label="Description" width="100%">
						<mx:TextArea id="txtProjectDescription" text="{editedProject.description}" change="queueProjectUpdate()" focusOut="updateProject()"/>
					</mx:FormItem>
					<mx:FormItem label="Project manager" visible="false" includeInLayout="false">
						<mx:ComboBox id="comboProjectManager" />
					</mx:FormItem>
					<mx:FormItem label="Participants" direction="vertical" visible="false" includeInLayout="false">
						<mx:List/>
						<mx:HBox>
							<common:AddButton />
							<common:RemoveButton/>
						</mx:HBox>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
			<mx:VBox width="50%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
				<mx:Label text="Scenarios" fontWeight="bold"/>
				<search:StandardSearchBox width="100%" visible="false" includeInLayout="false"/>
				<mx:List dataProvider="{scenarioListModel.data}" width="100%" id="listScenarios" labelField="name" change="selectScenario()"/>
				<mx:HBox>
					<common:AddButton 
						visible="{permissions.canAddScenario}" 
						click="ViewUtils.getUserTextInput(this, addScenario, 'Enter Scenario Name', true)" />
					<common:RemoveButton 
						visible="{permissions.canRemoveScenario}" 
						click="removeScenario()" 
						toolTip="{currentScenarioSelected ? 'cannot delete currently loaded scenario' : null}"
						enabled="{model.scenarioModel.editorModel.id &amp;&amp; !currentScenarioSelected}"/>
				</mx:HBox>
				<mx:Form enabled="{editedScenario != null}" horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:FormItem label="Name" width="100%">
						<mx:TextInput id="txtScenarioName" text="{editedScenario.name}" change="queueScenarioUpdate()" focusOut="updateScenario()"/>
					</mx:FormItem>
					<mx:FormItem label="Description" width="100%">
						<mx:TextArea id="txtScenarioDescription" text="{editedScenario.description}"  change="queueScenarioUpdate()" focusOut="updateScenario()"/>
					</mx:FormItem>
					<mx:FormItem label="Story lines" visible="false" includeInLayout="false">
						<mx:List/>
					</mx:FormItem>
				</mx:Form>
			</mx:VBox>
		</mx:HBox>
	</mx:VBox>
	<mx:ControlBar horizontalAlign="right" verticalAlign="bottom">
		<mx:Label text="{editedProject.name + ' > ' + editedScenario.name}"/>
		<mx:Button label="Load Scenario"
			toolTip="{currentScenarioSelected ? 'scenario already loaded' : null}" 
			enabled="{!currentScenarioSelected &amp;&amp; editedScenario}" 
			click="loadScenario()"/>
	</mx:ControlBar>	
</mx:TitleWindow>
