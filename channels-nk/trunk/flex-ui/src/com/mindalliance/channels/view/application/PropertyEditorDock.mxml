<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalAlign="middle"
	creationComplete="init()">
	
	<mx:Script>
		<![CDATA[
			import com.mindalliance.channels.view.flowmap.FlowMapView;
			import mx.effects.Resize;
			import mx.events.ResizeEvent;
			import com.mindalliance.channels.view.common.ResizableTitleWindow;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.binding.utils.BindingUtils;
			import mx.containers.TitleWindow;
			import mx.managers.PopUpManager;
			
			[Bindable]
			private var _propertyEditor:PropertyEditor ;
			
			private var popUp:TitleWindow ;
			
			public function get propertyEditor():PropertyEditor {
				return _propertyEditor ;
			}
			
			private function init():void {
				_propertyEditor = new PropertyEditor() ;
				_propertyEditor.init() ;
				_propertyEditor.percentHeight = 100 ;
				_propertyEditor.percentWidth = 100 ;
				
				popUp = PopUpManager.createPopUp(this, ResizableTitleWindow) as ResizableTitleWindow;
				popUp.addChild(_propertyEditor) ;
				popUp.minHeight = 400 ;
				popUp.maxHeight = 600 ;
				popUp.minWidth = 200 ;
				popUp.maxWidth = 600 ;
				popUp.showCloseButton = true ;
				popUp.addEventListener(CloseEvent.CLOSE, propertyEditorCloseClicked) ;
				
				BindingUtils.bindSetter(setState, popUp, ['visible']) ;
				BindingUtils.bindSetter(setState, _propertyEditor, ['isEditing']) ;
				
				popUp.visible = false ;
			}
			
			protected function propertyEditorCloseClicked(event:CloseEvent):void {
				popUp.visible = false ;
			}
			
			private function setState(value:Object):void {
				if (_propertyEditor.isEditing) {
					currentState = 'PropertyEditorEditingState' ;
					popUp.showCloseButton = false ;
					return ;
				}
				else {
					popUp.showCloseButton = true ;					
					if (popUp.visible)
						currentState = 'PropertyEditorUndockedState' ;
					else
						currentState = '' ;
				}
			}
			
			private function btnEditorInvokerClicked():void {
				switch (currentState) {
					case 'PropertyEditorUndockedState':
						popUp.visible = false ;
					break ;
					case '':
						popUp.visible = true ;
					break ;
				}
			}
			
		]]>
	</mx:Script>
	
	<mx:states>
		<mx:State name="PropertyEditorEditingState">
			<mx:SetProperty target="{btnEditorInvoker}" name="label" value="Editing..."/>
			<mx:SetProperty target="{btnEditorInvoker}" name="enabled" value="false"/>
		</mx:State>
		<mx:State name="PropertyEditorUndockedState">
			<mx:SetProperty target="{btnEditorInvoker}" name="label" value="Hide Property Editor"/>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Glow/>
		</mx:Transition>
	</mx:transitions>
	<mx:Button id="btnEditorInvoker" label="Show Property Editor" click="btnEditorInvokerClicked()" icon="@Embed('../../../../../assets/images/edit.png')"/>

</mx:HBox>
