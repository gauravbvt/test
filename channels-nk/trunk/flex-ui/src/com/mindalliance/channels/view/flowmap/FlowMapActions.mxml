<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.mindalliance.channels.view.common.*" 
	xmlns:application="com.mindalliance.channels.view.application.*" 
	verticalAlign="middle"
	borderColor="#909090" 
	borderSides="bottom" 
	borderThickness="1">

	<!-- 
		This class will eventually affect more than just the flow map so it should be
		somewhere else.
	-->

	<mx:Script>
		<![CDATA[
			import com.yworks.canvas.geom.IRectangle;
			import com.mindalliance.channels.scenario.events.CreateTaskEvent;
			import com.mindalliance.channels.view.UtilFuncs;
			import mx.managers.PopUpManager;
			import com.mindalliance.channels.view.resources.RepositoryCreator;
			import com.mindalliance.channels.resources.events.CreateRepositoryEvent;
			import com.mindalliance.channels.scenario.events.CreateEventEvent;
			import mx.events.MenuEvent;
			import mx.controls.MenuBar;
			import com.mindalliance.channels.view.flowmap.data.TaskNodeData;
			import com.mindalliance.channels.view.flowmap.data.SharingNeedNodeData;
			import com.mindalliance.channels.view.flowmap.data.RepositoryNodeData;
			import com.mindalliance.channels.view.flowmap.data.EventNodeData;
			import com.mindalliance.channels.view.flowmap.data.GraphDataMapper;
			import com.mindalliance.channels.view.flowmap.data.NodeData;
			import mx.controls.Alert;
			import com.mindalliance.channels.scenario.events.UpdateTaskEvent;
			import com.mindalliance.channels.vo.common.OccurrenceVO;
			import com.mindalliance.channels.model.ElementModel;
			import com.mindalliance.channels.model.ChannelsModelLocator;
			import com.yworks.graph.model.DefaultNode;
			import com.yworks.graph.model.DefaultEdge;
			import com.yworks.graph.model.IEdge;
			import com.mindalliance.channels.resources.events.DeleteRepositoryEvent;
			import com.mindalliance.channels.scenario.events.DeleteEventEvent;
			import com.mindalliance.channels.scenario.events.DeleteTaskEvent;
			import com.mindalliance.channels.util.CairngormHelper;
			import com.yworks.graph.model.INode;
			import com.yworks.support.Iterator;
			import com.yworks.graph.model.SelectionEvent;
			
			private var _flowmap:FlowMap ;
			public function init(flowmap:FlowMap):void {
				_flowmap = flowmap ;
				_flowmap.addSelectionListener(FlowMapEvent.ITEM_SELECTED, flowMapSelectionChanged) ;
				_flowmap.addSelectionListener(FlowMapEvent.ITEM_DESELECTED, flowMapSelectionChanged) ;
			}
			
			[Bindable]
			private var numSelectedItems:int ;
			
			private function flowMapSelectionChanged(event:SelectionEvent):void {
				numSelectedItems = _flowmap.numSelected ;
			}
			
			private function deleteSelectedElements():void {
				var itemIter:Iterator = _flowmap.selectedItems.iterator() ;
				var mapper:GraphDataMapper = _flowmap.dataMapper ;
				var itemID:String ;
				var nd:NodeData ;
				while (itemIter.hasNext()) {
					var item:Object = itemIter.next() ;
					if (item is INode) {
						itemID = mapper.idMapper.lookupValue(item) as String ;
						if (!itemID)
							continue ;
						nd = mapper.nodeDataMapper.lookupValue(itemID) as NodeData;
						if (!nd)
							continue ;
						if (nd is TaskNodeData) {
							CairngormHelper.fireEvent(new DeleteTaskEvent(nd.id)) ;
							continue ;
						}
						else if (nd is EventNodeData) {
							CairngormHelper.fireEvent(new DeleteEventEvent(nd.id)) ;
							continue ;
						}
						else if (nd is RepositoryNodeData) {
							CairngormHelper.fireEvent(new DeleteRepositoryEvent(nd.id)) ;
							continue ;
						}
						else if (nd is SharingNeedNodeData) {
							continue ;
						}
					}
				}
			}
			
			public function addTask():void {
				function addTaskHandler(taskName:String):void {
					var scenarioID:String = ChannelsModelLocator.getInstance().currentScenario.id ;
					var event:CreateTaskEvent = new CreateTaskEvent(taskName, scenarioID) ;
					CairngormHelper.fireEvent(event) ;
				}
				
 				UtilFuncs.getUserTextInput(this, addTaskHandler, "Enter Name of New Task", true) ;
			}
			
			public function requestHandlerRegistration(menuBar:MenuBar):void {
				menuBar.addEventListener(MenuEvent.ITEM_CLICK, menuBarItemClicked) ;
			}
			
			protected function menuBarItemClicked(event:MenuEvent):void {
				var menuLabel:String = event.item.@label ;
				switch (menuLabel) {
					case "Add Task":
						addTask() ;
					break ;
					case "Add Event":
						addEvent() ;
					break ;
					case "Add Repository":
						addRepository() ;
					break ;
				}
			}
			
			public function addEvent():void {
				function addEventHandler(eventName:String):void {
					var scenarioID:String = ChannelsModelLocator.getInstance().currentScenario.id ;
					var event:CreateEventEvent = new CreateEventEvent(eventName, scenarioID) ;
					CairngormHelper.fireEvent(event) ;
				}
				UtilFuncs.getUserTextInput(this, addEventHandler, "Enter Name of New Event", true) ;
			}
			
			public function addRepository():void {
				function addRepositoryHandler(reposName:String, reposOwnerID:String):void {
					var scenarioID:String = ChannelsModelLocator.getInstance().currentScenario.id ;
					var event:CreateRepositoryEvent = new CreateRepositoryEvent(reposName, reposOwnerID) ;
					CairngormHelper.fireEvent(event) ;
				}
				
				var repoCreator:RepositoryCreator = PopUpManager.createPopUp(this, RepositoryCreator, true) as RepositoryCreator ;
				repoCreator.resultHandler = addRepositoryHandler ;
				PopUpManager.centerPopUp(repoCreator) ;
			}
			
		]]>
		
	</mx:Script>
	
<!--	<application:PropertyEditorDock id="propertyEditorDock" enabled="{numSelectedItems == 1}"/> -->
	<common:ToolBarButton id="btn" click="deleteSelectedElements()" enabled="{numSelectedItems > 0}" imageSource="assets/images/delete.png" label="Delete"/>
	<mx:VRule height="22"/>
	<common:ToolBarButton imageSource="assets/images/gear_add.png" label="Add Task" click="addTask()"/>
	<common:ToolBarButton label="Add Event" imageSource="assets/images/date_time_add.png" click="addEvent()"/>
	<common:ToolBarButton imageSource="assets/images/user1_add.png" label="Add Role" enabled="false" toolTip="not implemented yet"/>
	<common:ToolBarButton label="Add Repository" imageSource="assets/images/data_add.png" click="addRepository()"/>
	<mx:Spacer width="100%"/>
	<common:ToolBarButton label="Refresh Layout" imageSource="assets/images/refreshlayout16x16.png" click="_flowmap.redraw()"/>
	
</mx:HBox>