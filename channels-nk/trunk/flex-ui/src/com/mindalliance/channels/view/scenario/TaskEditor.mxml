<?xml version="1.0" encoding="utf-8"?>
<mx:Box xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.mindalliance.channels.view.common.*"
	xmlns:categories="com.mindalliance.channels.view.categories.*"
    implements="com.mindalliance.channels.view.common.IEditor"
    enabled="{edited != null}">

	<mx:Script>
		<![CDATA[
			import com.mindalliance.channels.view.people.RoleChooser;
			import com.mindalliance.channels.view.common.Chooser;
			import com.mindalliance.channels.events.scenario.CreateAgentEvent;
			import com.mindalliance.channels.vo.AgentVO;
			import com.mindalliance.channels.events.scenario.DeleteAgentEvent;
			import com.mindalliance.channels.model.ElementListModel;
			import com.mindalliance.channels.events.scenario.UpdateTaskEvent;
			import com.mindalliance.channels.events.scenario.GetTaskEvent;
            import com.mindalliance.channels.util.ElementHelper;
            import com.mindalliance.channels.view.UtilFuncs;
            import com.mindalliance.channels.vo.common.DurationVO;
            import com.mindalliance.channels.vo.common.CauseVO;
            import com.mindalliance.channels.vo.common.ElementVO;
            import com.mindalliance.channels.util.CairngormHelper;
            import com.mindalliance.channels.model.ChannelsModelLocator;
            import com.mindalliance.channels.model.ElementModel;
            import mx.collections.ArrayCollection;
            import com.mindalliance.channels.vo.TaskVO;
            import mx.core.IFlexDisplayObject;
        
            import mx.managers.PopUpManager ;
            import com.mindalliance.channels.model.EditorModel;
            
            [Bindable]
            public function get model() : EditorModel 
            {
                return _editorModel;
            }
            
            public function set model(model : EditorModel) : void 
            {
                this._editorModel = model;
            }
            public var _editorModel : EditorModel = ChannelsModelLocator.getInstance().getEditorModel();
            
            [Bindable]
            private var elementModel : ElementModel;
            
            [Bindable]
            private var taskList : ArrayCollection;

            [Bindable]
            private var eventList : ArrayCollection;
           
            [Bindable]
            private var artifactList : ArrayCollection;
            
            [Bindable]
            private var agentListModel : ElementListModel;
            
            [Bindable]
            private var agentList : ArrayCollection;
            
            [Bindable]
            private var edited : TaskVO;
            
            private function switchToEditState():void {
                currentState = 'EditState' ;
            }
            
            private function confirmEdit():void {
                update();
                currentState = '' ;
            }
            
            private function cancelEdit():void {
                // Revert
                CairngormHelper.fireEvent( new GetTaskEvent(model.id,model));
                currentState = '' ;
            }
            
            private function update() :void {
                
                var cause : CauseVO;
                if (rbCauseExists.selected) {
                    var id : String;
                    if (cbEventTask.selectedLabel=="event"  && comboEvents.selectedIndex >= 0) {
                        id = (comboEvents.selectedItem as ElementVO).id;
                    } else if (cbEventTask.selectedLabel=="task" && comboTasks.selectedIndex >=0) {
                        
                        id = (comboTasks.selectedItem as ElementVO).id;
                    }
                    if (id != null) {
                        cause= new CauseVO(cbEventTask.selectedLabel,id,null,null);
                    }
                }
                
                var duration : DurationVO;
                
                if (txtDurationValue.text != null) {
                    duration = new DurationVO(Number(txtDurationValue.text), comboDurationUnit.selectedItem.abbr);
                }
                CairngormHelper.fireEvent( new UpdateTaskEvent(model,
                                                                txtName.text,
                                                                txtDescription.text,
                                                                categoryViewer.model.categories,
                                                                (elementModel.data as TaskVO).where,
                                                                cause,
                                                                duration,
                                                                (elementModel.data as TaskVO).scenario));   

            }
            
            private function queueUpdate() : void {
                CairngormHelper.queueUpdate(model);
            }
            
            private function taskFilter(item : Object) : Boolean {
                 if ((item as ElementVO).id == edited.id) { 
                    return false;
                 }
                 return true;
            }
            
            private function init() : void {
                switchToEditState();    
            }
			private function chooseArtifacts():void {
				var popup:ArtifactChooser = ArtifactChooser(PopUpManager.createPopUp(listArtifacts, ArtifactChooser));
				
//				(popup as ArtifactChooser).filtered=edited.artifacts;
//				(popup as ArtifactChooser).processSelected=addArtifacts;
				PopUpManager.centerPopUp(popup) ;
			}
			
			private function chooseAcquirements():void {
				// we don't take kindly to empty functions around here
			}
			
			private function deleteAgent() : void {
                CairngormHelper.fireEvent(new DeleteAgentEvent((listAgents.selectedItem).id,edited.id));
			}
			
			
			private function chooseAgents() : void {
                var rc:Chooser = (PopUpManager.createPopUp(listAgents,RoleChooser,false) as Chooser);
                rc.filter = function(item : Object) : Boolean {
                    var agent : AgentVO = (item as AgentVO);
                    for each (var role : ElementVO in agentList) {
                    	if (role.id == agent.role.id)
                    	   return false;
                    }	
                    return true;
                }
                rc.filtered = agentList;
                rc.processSelected=function(selected : ArrayCollection) : void {
                    for each(var el : ElementVO in selected) {
                        CairngormHelper.fireEvent(new CreateAgentEvent(el.name, edited.id,el.id));
                    }
                }       
                var p:Point = new Point(listAgents.x, listAgents.y) ;
                p = listAgents.localToGlobal(p) ;
                rc.x = p.x + listAgents.width + 5 ;
                rc.y = p.y ;	
			}
		]]>
	</mx:Script>
    <mx:Style source="../../../../../assets/styles/FormStyles.css"/>
    <mx:Binding source="model.getElementModel(model.id)" destination="elementModel"/>
    <mx:Binding source="(elementModel.data as TaskVO)" destination="edited"/>
    <mx:Binding source="model.getElementListModel('tasks').data" destination="taskList"/>
    <mx:Binding source="model.getElementListModel('events').data" destination="eventList"/>
    <mx:Binding source="model.getElementListModel('agents' + edited.id)" destination="agentListModel"/>
    <mx:Binding source="agentListModel.data" destination="agentList"/>
    <mx:Binding source="edited.categories" destination="categoryViewer.model.categories"/>
	<mx:states>
		<mx:State name="EditState">
			<mx:AddChild relativeTo="{txtName}" position="before">
				<mx:Text text="e.g.: Search suspect home" styleName="FormItemDescription"/>
			</mx:AddChild>
			<mx:SetProperty target="{txtDescription}" name="editable" value="true"/>
			<mx:AddChild relativeTo="{formitemAgents}" position="lastChild">
				<mx:HBox id="hBoxEditAgents">
					<common:AddButton click="chooseAgents()" enabled="{agentList.length &lt;= 1}" toolTip="{agentList.length &gt; 1 ? 'Only one agent supported (yFiles temp limitation)' : ''}"/>
					<common:RemoveButton enabled="{listAgents.selectedItems.length > 0}" click="deleteAgent()"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{formitemArtifacts}" position="lastChild">
				<mx:HBox id="hBoxEditArtifacts">
					<common:AddButton click="chooseArtifacts()"/>
					<common:RemoveButton enabled="{listArtifacts.selectedItems.length > 0}"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{listArtifacts}" position="before">
				<mx:Text text="e.g.: tissue samples" styleName="FormItemDescription"/>
			</mx:AddChild>
			<mx:SetProperty target="{viewEditStateChangeFormItem}" name="currentState" value="EditState"/>
			<mx:AddChild relativeTo="{viewEditStateChangeFormItem}" position="after">
				<common:HintFieldRequiredFormItem/>
			</mx:AddChild>
			<mx:SetProperty target="{formitemCause}" name="mouseEnabled" value="true"/>
			<mx:SetProperty target="{formitemCause}" name="mouseChildren" value="true"/>
			<mx:SetProperty target="{formitemDuration}" name="mouseChildren" value="true"/>
			<mx:SetProperty target="{formitemDuration}" name="mouseEnabled" value="true"/>
			<mx:SetProperty target="{formitemName}" name="required" value="true"/>
			<mx:SetProperty target="{txtName}" name="editable" value="true"/>
			<mx:SetProperty target="{categoryViewer}" name="currentState" value="EditState"/>
			<mx:AddChild relativeTo="{formitemAcquirements}" position="lastChild">
				<mx:HBox id="hBoxEditAcquirements">
					<common:AddButton click="chooseAcquirements()"/>
					<common:RemoveButton enabled="{listAcquirements.selectedItems.length > 0}"/>
				</mx:HBox>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<common:ViewEditStateTransition fromState="*" toState="*" targets="{[formitemAgents, formitemArtifacts, formitemCategories]}"/>
	</mx:transitions>

	<mx:Style source="../../../../../assets/styles/FormStyles.css"/> 

	<mx:Form>
		<common:ViewEditStateChangeFormItem id="viewEditStateChangeFormItem"
			btnEditClickHandler="{switchToEditState}" cancelEditHandler="{cancelEdit}" confirmEditHandler="{confirmEdit}" 
			width="100%"/>
		<mx:FormItem label="Task Name" direction="vertical" id="formitemName">
			<mx:TextInput id="txtName" editable="false" styleName="PrimaryNameFieldEditState" text="{edited.name}" change="queueUpdate()"/>
		</mx:FormItem>
		<mx:FormItem label="Description">
			<mx:TextArea id="txtDescription" wordWrap="true" editable="false" text="{edited.description}" change="queueUpdate()"/>
		</mx:FormItem>
		<mx:FormItem label="Agents" direction="vertical" id="formitemAgents">
			<mx:Text text="The following roles execute this task:" styleName="FormItemDescription" id="text1"/>
			<mx:List id="listAgents" dataProvider="{agentList}" labelField="name"/>
		</mx:FormItem>
	    <mx:FormItem label="Cause" direction="vertical" id="formitemCause" mouseEnabled="false" mouseChildren="false" resizeEffect="Resize">
	        <mx:VBox id="vBoxCause">
	            <mx:RadioButtonGroup id="rbgCause"/>
	            <mx:RadioButton groupName="rbgCause" label="This task is independent of other events or tasks." selected="{edited.cause==null}" change="queueUpdate()" />
	            <mx:VBox>
	                <mx:HBox>
	                    <mx:RadioButton groupName="rbgCause" label="This task is caused by another" id="rbCauseExists" selected="{edited.cause!=null}" change="queueUpdate()"/>
	                    <mx:HBox id="hBoxCauseExists">
	                        <mx:ComboBox id="cbEventTask" selectedIndex="{edited.cause.type =='task' ? 1 : 0}" change="queueUpdate()">
	                            <mx:String>event</mx:String>
	                            <mx:String>task</mx:String>
	                        </mx:ComboBox>
	                    </mx:HBox>
	                </mx:HBox>
	                <mx:HBox includeInLayout="{rbCauseExists.selected}" visible="{rbCauseExists.selected}">
	                    <mx:Label text="{'Select '+cbEventTask.selectedItem+':'}"/>
	                    <mx:ViewStack selectedIndex="{cbEventTask.selectedIndex}"
	                        showEffect="Resize" hideEffect="Resize">
	                        <mx:Box>
	                            <common:ElementComboBox id="comboEvents" dataProvider="{eventList}"  selectedValue="{edited.cause.id}" change="queueUpdate()"/>
	                        </mx:Box>
	                        <mx:Box>
	                            <common:ElementComboBox id="comboTasks" dataProvider="{taskList}" selectedValue="{edited.cause.id}"  change="queueUpdate()"/>
	                        </mx:Box>
	                    </mx:ViewStack>                                 
	                </mx:HBox>              
	            </mx:VBox>
	        </mx:VBox>  
        </mx:FormItem>
		<mx:FormItem label="Duration" mouseChildren="false" mouseEnabled="false" id="formitemDuration">
			<mx:HBox>
				<mx:Label text="About"/>
                <mx:TextInput width="100" id="txtDurationValue" change="queueUpdate()" text="{edited.duration.value}"/>
                <common:TimeScalesComboBox id="comboDurationUnit" selectedValue="{edited.duration.unit}" change="queueUpdate()"/>
			</mx:HBox>
		</mx:FormItem>
		<mx:FormItem label="Artifacts produced" direction="vertical" id="formitemArtifacts">
			<mx:List id="listArtifacts" />
		</mx:FormItem>
		<mx:FormItem label="Information acquired" direction="vertical" id="formitemAcquirements">
			<mx:List id="listAcquirements" />
		</mx:FormItem>
		<mx:FormItem label="Categories" id="formitemCategories" width="100%">
            <categories:CategoryViewer id="categoryViewer" change="{queueUpdate}"/>
		</mx:FormItem>
	</mx:Form>
</mx:Box>