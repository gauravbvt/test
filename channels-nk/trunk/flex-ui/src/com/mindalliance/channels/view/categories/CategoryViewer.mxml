<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:common="com.mindalliance.channels.view.common.*">
	
	<mx:Script>
		<![CDATA[
			import com.mindalliance.channels.view.UtilFuncs;
			import com.mindalliance.channels.events.categories.AddCategoriesToSetEvent;
			import com.mindalliance.channels.events.categories.RemoveCategoriesFromSetEvent;
			import com.mindalliance.channels.util.CairngormHelper;
			import mx.collections.ArrayCollection;
			import com.mindalliance.channels.vo.common.CategorySetVO;
			import com.mindalliance.channels.model.ChannelsModelLocator;
			import mx.managers.PopUpManager;
			import mx.core.IFlexDisplayObject;
			import com.mindalliance.channels.model.categories.CategoryViewerModel;
			
			[Bindable]
			public var model : CategoryViewerModel = ChannelsModelLocator.getInstance().getCategoryViewerModel();
			
			[Bindable]
			public var change : Function;
			
			[Bindable]
			private var categories : ArrayCollection;
			
			private function showCategoryChooser():void {
				var p:Point = listCategories.localToGlobal(new Point(listCategories.x, listCategories.y)) ;
				var popup:IFlexDisplayObject = PopUpManager.createPopUp(listCategories, CategoryChooser, false) ;
				var chooser : CategoryChooser = (popup as CategoryChooser);
				chooser.processSelected=addCategories;
				PopUpManager.centerPopUp(popup) ;
			}
			
			private function addCategories(categories : Array) : void {
				if (categories.length > 0) {
                    CairngormHelper.fireEvent(new AddCategoriesToSetEvent(categories, model));
                    if (change!=null)
                        change();
                }
			}
			
			private function removeCategories(categories : Array) : void {
				if (categories.length > 0) {
                    CairngormHelper.fireEvent(new RemoveCategoriesFromSetEvent(categories, model));
                    if (change != null)
                        change();
				}
			}
		]]>
	</mx:Script>

    <mx:Binding source="UtilFuncs.copyArrayCollection(model.categories.categories)" destination="categories"/>
	
	<mx:states>
		<mx:State name="EditState">
			<mx:SetProperty target="{lblEOI}" name="text" value="2. Select Elements of Information"/>
			<mx:AddChild relativeTo="{vboxCategories}" position="lastChild">
				<mx:HBox width="100%">
					<common:AddButton click="showCategoryChooser()"/>
					<common:RemoveButton enabled="{listCategories.selectedItems.length > 0}" click="removeCategories(listCategories.selectedItems)"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:AddChild relativeTo="{listCategories}" position="before">
				<mx:Label text="1. Assign categories"/>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	
	<mx:transitions>
		<mx:Transition fromState="*" toState="*">
			<mx:Parallel>
				<mx:Resize/>
				<mx:Fade/>
			</mx:Parallel>
		</mx:Transition>
	</mx:transitions>
	
	<mx:VBox id="vboxCategories" height="100%">
		<mx:List id="listCategories" height="100%" editable="false" dataProvider="{categories}" labelField="name"/>
	</mx:VBox>
	<mx:VBox>
		<mx:Label text="Elements of Information" id="lblEOI"/>
		<mx:List id="listEOI" dataProvider="{model.eois}" editable="false" rendererIsEditor="true">
			<mx:itemRenderer>
				<mx:Component>
					<mx:CheckBox/>
				</mx:Component>
			</mx:itemRenderer>
		</mx:List>
	</mx:VBox>
</mx:HBox>