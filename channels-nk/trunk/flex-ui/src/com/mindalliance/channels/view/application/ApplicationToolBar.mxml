<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
    width="100%" xmlns:application="com.mindalliance.channels.view.application.*" 
    xmlns:search="com.mindalliance.channels.view.search.*"
    xmlns:logging="com.mindalliance.channels.view.logging.*">
    <mx:Script>
	    <![CDATA[
	    	import com.mindalliance.channels.view.common.IChannelsModelComponent;
	    	import mx.effects.Resize;
	    	import mx.events.FlexEvent;
	    	import mx.events.EffectEvent;
	    	import mx.effects.WipeUp;
	    	import mx.effects.WipeDown;
	    	import mx.effects.Effect;
	    	import mx.containers.Panel;
	    	import com.mindalliance.channels.view.common.IChannelsModelComponent;
	    	import com.mindalliance.channels.view.scenario.ArtifactChooser;
	    	import com.mindalliance.channels.view.scenario.TaskChooser;
	    	import com.mindalliance.channels.view.categories.CategoryViewer;
	    	import com.mindalliance.channels.view.people.RoleChooser;
	    	import com.mindalliance.channels.view.categories.CategoryLibraryEditor;
	    	import com.mindalliance.channels.view.people.RoleEditor;
	    	import com.mindalliance.channels.view.scenario.ArtifactEditor;
	    	import com.mindalliance.channels.view.people.PersonalProfileEditor;
	    	import com.mindalliance.channels.view.scenario.EventEditor;
	    	import com.mindalliance.channels.view.scenario.TaskEditor;
	    	import com.mindalliance.channels.model.ChannelsModelLocator;
	    	import mx.events.CloseEvent;
	    	import com.mindalliance.channels.view.resources.RepositoryEditor;
	    	import mx.controls.Menu;
	    	import com.mindalliance.channels.view.people.OrganizationEditor;
	    	import com.mindalliance.channels.view.categories.CategoryChooser;
	    	import com.mindalliance.channels.view.UtilFuncs;
	        import mx.containers.TitleWindow;
	        import mx.events.FlexMouseEvent;
	        import mx.controls.Alert;
	        import mx.events.MenuEvent;
        	import mx.core.IFlexDisplayObject;
            import mx.managers.PopUpManager;
        			
            [Bindable]
 	        private var model : ChannelsModelLocator = ChannelsModelLocator.getInstance();
        
            private var classHash:Object = {
                "Category Library Editor":[ CategoryLibraryEditor,model.categoryLibraryEditorModel],
                "Category Viewer":[ CategoryViewer,model.categoryViewerModel], 
                "Category Chooser":[ CategoryChooser,model.categoryChooserModel],
                "Personal Profile Editor":[ PersonalProfileEditor,model.organizationEditorModel],
                "Role Editor":[ RoleEditor,model.propertyEditorModel.roleEditorModel],
                "Role Chooser":[ RoleChooser,model.propertyEditorModel.roleChooserModel],
                "Organization Editor":[ OrganizationEditor,model.organizationEditorModel],
                "Repository Editor":[ RepositoryEditor, model.propertyEditorModel.repositoryEditorModel],
                "Task Editor":[ TaskEditor, model.propertyEditorModel.taskEditorModel],
                "Task Chooser":[ TaskChooser, model.propertyEditorModel.taskChooserModel],
                "Event Editor":[ EventEditor, model.propertyEditorModel.eventEditorModel],
                "Artifact Editor":[ ArtifactEditor, model.propertyEditorModel.artifactEditorModel],
                "Artifact Chooser":[ArtifactChooser,model.propertyEditorModel.artifactChooserModel]
                };
                
            private function popUpTraceWindow():void {
            	var traceWindow:TitleWindow = TitleWindow(PopUpManager.createPopUp(this, TitleWindow, false)) ;
            	traceWindow.showCloseButton = true; 
            	traceWindow.addEventListener(CloseEvent.CLOSE, function anon():void{PopUpManager.removePopUp(traceWindow);}) ;
            	// Add whatever trace display component like textarea here.
            	//traceWindow.addChild(<blah>) ;
            }    
                
            private function menuBarItemClicked(event:MenuEvent):void {
                var c:Class = classHash[event.item.@label][0] ;
                if (c != null) {
                	var popUp:TitleWindow ;
	            	popUp = TitleWindow(PopUpManager.createPopUp(this, TitleWindow)) ;
	            	var component : IChannelsModelComponent = (new ClassFactory(c).newInstance() as IChannelsModelComponent);
	            	component.channelsModel = classHash[event.item.@label][1];
	            	popUp.addChild(component as DisplayObject) ;
	            	popUp.showCloseButton = true ;
	            	popUp.addEventListener(CloseEvent.CLOSE, function handler(event:CloseEvent):void {PopUpManager.removePopUp(popUp)}) ;
	                popUp.x = this.x + 100 ;
	                popUp.y = this.y ;
                }
                var menuItem:String = event.item.@label ;
                switch (menuItem) {
                	case "Edit Categories":
                		var cle:CategoryLibraryEditor = CategoryLibraryEditor(PopUpManager.createPopUp(this, CategoryLibraryEditor)) ;
                		cle.channelsModel = model.categoryLibraryEditorModel;
                		cle.addEventListener(FlexMouseEvent.MOUSE_DOWN_OUTSIDE, 
                			function close(event:FlexMouseEvent):void{
                				PopUpManager.removePopUp(cle);
                				});
                		cle.addEventListener(FlexEvent.CREATION_COMPLETE, 
                			function wipeDown(event:FlexEvent):void {
                				new WipeDown(cle).play() ;
                				}) ;
                		PopUpManager.centerPopUp(cle) ;
                		cle.y = this.y + this.height + 2 ;
                	break ;
                	case "Create New Scenario":
                	case "Edit Scenario Properties":
                	case "Switch to a Different Scenario":
                	case "Create New Project":
                	case "Edit Project Properties":
                		projectScenarioIndicator.dispatchEvent(new MouseEvent(MouseEvent.CLICK)) ;
                	break ;
                }
            }
            
            private function editPersonalProfile():void {
            	var profileWindow:TitleWindow = TitleWindow(PopUpManager.createPopUp(this, TitleWindow, false)) ; ;
            	profileWindow.title = "Personal Profile" ;
            	profileWindow.showCloseButton = true ;
            	profileWindow.addEventListener(CloseEvent.CLOSE, 
            	function closeHandler(event:CloseEvent):void {
             		PopUpManager.removePopUp(profileWindow);
            		}) ;
            	profileWindow.addEventListener(FlexEvent.CREATION_COMPLETE, 
            	function creationCompleteHandler(event:FlexEvent):void {
            			new WipeDown(profileWindow).play() ;
            		}); 
            	
            	var personalProfileEditor:PersonalProfileEditor = new PersonalProfileEditor() ;
            	personalProfileEditor.channelsModel = model.personalProfileEditorModel;
            	profileWindow.addChild(personalProfileEditor) ;
            	PopUpManager.centerPopUp(profileWindow) ;
            	profileWindow.y = this.y + this.height + 2 ;
            }
            
	    ]]>
	</mx:Script>
		
     <mx:XMLList id="ChannelsMenuBarItems">
        <menuitem label="*TEST*Forms">
			<menuitem label="Category Library Editor"/>
			<menuitem label="Category Viewer"/>
			<menuitem label="Category Chooser"/>
			<menuitem label="Personal Profile Editor"/>
			<menuitem label="Role Editor"/>
			<menuitem label="Role Chooser"/>
			<menuitem label="Organization Editor"/>
			<menuitem label="Repository Editor"/>
			<menuitem label="Task Editor"/>
			<menuitem label="Task Chooser"/>
			<menuitem label="Event Editor"/>
			<menuitem label="Artifact Editor"/>
			<menuitem label="Artifact Chooser"/>
        </menuitem>
        <menuitem label="Project">
        	<menuitem label="Create New Project"/>
        	<menuitem label="Edit Project Properties"/>
        	<menuitem type="separator"/>
        	<menuitem label="People">
        		<menuitem label="My Profile"/>
        		<menuitem label="Browse Directory"/>
        	</menuitem>
        </menuitem>
		<menuitem label="Scenario">
        	<menuitem label="Create New Scenario"/>
        	<menuitem label="Edit Scenario Properties"/>
        	<menuitem label="Switch to a Different Scenario"/>
        </menuitem>
		<menuitem label="Shared Elements">
			<menuitem label="Edit Categories"/>
		</menuitem>
    </mx:XMLList>
	
	<logging:LoggerButton label="Show Trace Output" visible="{model.debug}" fillColors="[#f09a7b, #f09a7b]"/>
    <mx:MenuBar id="channelsMenuBar" dataProvider="{ChannelsMenuBarItems}" labelField="@label" showRoot="false" itemClick="menuBarItemClicked(event)"/>
    <mx:Spacer width="100%"/>
    <application:ProjectScenarioIndicator id="projectScenarioIndicator"/>
    <mx:Button label="Go to Dashboard"/>
	<mx:Spacer width="100%"/>
	<mx:Label text="{'Logged in as: '+model.username}"/>
	<mx:Button label="My Profile" id="btnEditProfile" click="editPersonalProfile()"/>
	<mx:Button label="Logout"/>
</mx:HBox>
