<?xml version="1.0" encoding="utf-8"?>
<mx:ApplicationControlBar xmlns:mx="http://www.adobe.com/2006/mxml"
    width="100%" xmlns:application="com.mindalliance.channels.view.application.*" 
    xmlns:search="com.mindalliance.channels.view.search.*"
    xmlns:logging="com.mindalliance.channels.view.logging.*"
    currentState="{model.currentScenario == null ? 'DashboardState' : 'InScenarioState'}"
    horizontalAlign="center"
    creationComplete="init()">
    <mx:states>
        <mx:State name="DashboardState">
            <mx:AddChild relativeTo="{spacer1}" position="before">
	            <mx:Label text="{personVO.firstName + ' ' + personVO.lastName +  '\'' + (personVO.lastName.charAt(personVO.lastName.length - 1) == 's' ? '' : 's') + ' Dashboard'}"
		            	fontWeight="bold" id="lblDashboardHeaderLabel"/>
            </mx:AddChild>
        </mx:State>
        <mx:State name="InScenarioState">
            <mx:AddChild relativeTo="{spacer1}" position="before">
                <application:ProjectScenarioIndicator id="projectScenarioIndicator"/>
            </mx:AddChild>
            <mx:AddChild relativeTo="{spacer2}" position="before">
            	<!--Need some kinda unload event to dispatch here. -->
                <mx:Button label="Go to Dashboard" click="Alert.show('This will eventually go to dashboard')"/>
            </mx:AddChild>
        </mx:State>
    </mx:states>
    <mx:Script>
	    <![CDATA[
	    	import com.mindalliance.channels.util.CairngormHelper;
	    	import mx.binding.utils.BindingUtils;
	    	import mx.binding.utils.ChangeWatcher;
	    	import mx.events.StateChangeEvent;
	    	import com.mindalliance.channels.vo.PersonVO;
	    	import com.mindalliance.channels.model.EditorModel;
	    	import com.mindalliance.channels.view.people.PersonChooser;
	    	import com.mindalliance.channels.view.scenario.ArtifactEditor;
	    	import com.mindalliance.channels.view.scenario.ArtifactChooser;
	    	import com.mindalliance.channels.view.people.OrganizationChooser;
	    	import mx.effects.Resize;
	    	import mx.events.FlexEvent;
	    	import mx.events.EffectEvent;
	    	import mx.effects.WipeUp;
	    	import mx.effects.WipeDown;
	    	import mx.effects.Effect;
	    	import mx.containers.Panel;
	    	import com.mindalliance.channels.view.scenario.AcquirementChooser;
	    	import com.mindalliance.channels.view.scenario.TaskChooser;
	    	import com.mindalliance.channels.view.categories.CategoryViewer;
	    	import com.mindalliance.channels.view.people.RoleChooser;
	    	import com.mindalliance.channels.view.categories.CategoryLibraryEditor;
	    	import com.mindalliance.channels.view.people.RoleEditor;
	    	import com.mindalliance.channels.view.scenario.AcquirementEditor;
	    	import com.mindalliance.channels.view.people.PersonalProfileEditor;
            import com.mindalliance.channels.view.scenario.EventEditor;
            import com.mindalliance.channels.view.scenario.EventChooser;
	    	import com.mindalliance.channels.view.scenario.TaskEditor;
	    	import com.mindalliance.channels.model.ChannelsModelLocator;
	    	import mx.events.CloseEvent;
            import com.mindalliance.channels.view.resources.RepositoryEditor;
            import com.mindalliance.channels.view.resources.RepositoryChooser;
	    	import mx.controls.Menu;
	    	import com.mindalliance.channels.view.people.OrganizationEditor;
	    	import com.mindalliance.channels.view.categories.CategoryChooser;
	    	import com.mindalliance.channels.view.UtilFuncs;
	        import mx.containers.TitleWindow;
	        import mx.events.FlexMouseEvent;
	        import mx.controls.Alert;
	        import mx.events.MenuEvent;
        	import mx.core.IFlexDisplayObject;
            import mx.managers.PopUpManager;
        			
            [Bindable]
 	        private var model : ChannelsModelLocator = ChannelsModelLocator.getInstance();
 	         	        
 	        [Bindable]
 	        private var personEditorModel:EditorModel ;
 	         	        
 	        [Bindable]
 	        private var personVO:PersonVO ;
			 	          			                    
            private function editPersonalProfile():void {
            	var profileWindow:TitleWindow = PopUpManager.createPopUp(this, TitleWindow, false) as TitleWindow ;
            	profileWindow.title = "Personal Profile" ;
            	profileWindow.showCloseButton = true ;
            	profileWindow.addEventListener(CloseEvent.CLOSE, 
            	function closeHandler(event:CloseEvent):void {
             		PopUpManager.removePopUp(profileWindow);
            		}) ;
            	profileWindow.addEventListener(FlexEvent.CREATION_COMPLETE, 
            	function creationCompleteHandler(event:FlexEvent):void {
            			new WipeDown(profileWindow).play() ;
            		}); 
            	
            	profileWindow.addChild(personalProfileEditor) ;
            	PopUpManager.centerPopUp(profileWindow) ;
            	var p:Point = this.localToGlobal(new Point(this.x, this.y + this.height)) ;
            	profileWindow.y = p.y + 5 ;
            }
            
            [Bindable]
            private var personalProfileEditor:PersonalProfileEditor ;
            
            private static var instance:ApplicationToolBar ;
            
            public static function getInstance():ApplicationToolBar {
            	return instance ;
            }
            
            private function init():void {
            	personalProfileEditor = new PersonalProfileEditor() ;
            	instance = this ;
            }
            
	    ]]>
	</mx:Script>
	
	<mx:Binding source="personalProfileEditor.personEditor.model" destination="personEditorModel"/>
	<mx:Binding source="personEditorModel.getElementModel(personEditorModel.id).data as PersonVO" destination="personVO"/>
    
	<logging:LoggerButton label="Show Trace Output" visible="{model.debug}" fillColors="[#f09a7b, #f09a7b]" id="loggerbutton1"/>
    <mx:Spacer width="100%" id="spacer2"/>
    <mx:Spacer width="100%" id="spacer1"/>
	<mx:Label text="{'Logged in as: '+model.user.name}"/>
	<mx:Button label="My Profile" id="btnEditProfile" click="editPersonalProfile()"/>
	<mx:Button label="Logout"/>
</mx:ApplicationControlBar>
