<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
    xmlns:search="com.mindalliance.channels.search.view.*" xmlns:scenario="com.mindalliance.channels.scenario.view.*"
    resizeEffect="Resize"
    creationComplete="init()" 
    xmlns:common="com.mindalliance.channels.common.view.*"
    horizontalScrollPolicy="off"
    verticalScrollPolicy="on">
    <mx:states>
        <mx:State name="BrowserState">
            <mx:SetProperty target="{hBoxElementAdder}" name="includeInLayout" value="false"/>
            <mx:SetProperty target="{hBoxElementAdder}" name="visible" value="false"/>
            <mx:AddChild relativeTo="{hBoxElementAdder}" position="before">
                <mx:HBox width="100%">
                    <common:AddButton click="btnAddClicked()"/>
                    <common:RemoveButton enabled="{listElements.selectedItems.length > 0}" click="removeClickWrapper()"/>
                </mx:HBox>
            </mx:AddChild>
            <mx:SetStyle target="{chooserHBox}" name="verticalAlign" value="top"/>
            <mx:SetProperty target="{button1}" name="label" value="Close"/>
        </mx:State>
    </mx:states>

    <mx:Script>
        <![CDATA[
        	import mx.events.CollectionEvent;
        	import mx.binding.utils.ChangeWatcher;
            import com.mindalliance.channels.common.events.ChooserSelectEvent;
            import com.mindalliance.channels.util.ElementHelper;
            import com.mindalliance.channels.util.CairngormHelper;
            import com.mindalliance.channels.vo.common.ElementVO;
            import com.mindalliance.channels.model.ChannelsModelLocator;
            import com.mindalliance.channels.model.ElementListModel;
            import mx.collections.ArrayCollection;
            import mx.managers.PopUpManager;
            import com.mindalliance.channels.model.ChooserModel;
            
            public static const BROWSER_STATE:String = "BrowserState" ;
            
            // Models
            
            [Bindable]
            protected var channelsModel : ChannelsModelLocator = ChannelsModelLocator.getInstance();
            
            [Bindable] 
            protected var elementListKey : String;
            
            [Bindable]
            protected var elementName : String;
            
            [Bindable]
            protected var editor : IEditor;
            
            [Bindable]
            public var model : ChooserModel;
 
            private var _filtered : ArrayCollection;
            
            [Bindable]
            public var processSelected : Function;

            [Bindable]
            private var elementListModel : ElementListModel;

            
            [Bindable]
            public function get filtered() : ArrayCollection {
                return _filtered;	
            }
            
            public function set filtered (filtered: ArrayCollection) : void {
                if (_filtered != null) {
                    _filtered.removeEventListener(CollectionEvent.COLLECTION_CHANGE, applyFilter);	
                }
                _filtered = filtered;
                
                _filtered.addEventListener(CollectionEvent.COLLECTION_CHANGE, applyFilter);
            }
            
            //Override
            protected function populateList() : void {
            	
            }
            //Override
            protected function populateElement(id : String) : void {
            	
            }
            
            //Override
            protected function btnAddClicked():void {
            	
            }
            
            //Override
            protected function btnRemoveClicked():void {
            	
            }
            
            private function removeClickWrapper() : void {
                btnRemoveClicked();
                listElements.selectedIndex = -1;
                changeSelection();
            }
            
            private function closeChooser():void {
            	
                PopUpManager.removePopUp(this) ;
                elementListModel.data.removeEventListener(CollectionEvent.COLLECTION_CHANGE, applyFilter);
                if (_filtered != null) {
                    _filtered.removeEventListener(CollectionEvent.COLLECTION_CHANGE, applyFilter);	
                }
            }
            protected function init(): void {
            	if (model == null){
                    model = channelsModel.getChooserModel();
                }
                if (elementListKey != null) {
            	    populateList();

                    model.editorModel = editor.model;
                    elementListModel.data.addEventListener(CollectionEvent.COLLECTION_CHANGE, applyFilter);
                }
            }
            
            private function applyFilter(evt : Event = null) : void {
                 list.refresh();    
            }
            
           public var filter: Function  = function(item : Object) : Boolean {
                var el : ElementVO = (item as ElementVO);
                if (filtered != null && ElementHelper.findElementById(el.id, filtered) != null) {
                    return false;   
                } else if (searchBox.text != null && searchBox.text.length > 0 && el.name.match(searchBox.text) == null) {
                    return false;
                }
                return true;
            }
            
            private function changeSelection() : void {
                var el : ElementVO = (listElements.selectedItem as ElementVO);
                var id : String = null;
                if (el != null) {
                    id = el.id;
                }
                populateElement(id);
                CairngormHelper.fireEvent(new ChooserSelectEvent(model, listElements.selectedItems));
            }
            
            private function clickAddToList() : void {
                if (processSelected != null) {
                    processSelected(model.selection);
                    applyFilter();
                }
            }
            
            private function initEditor() : void {
                if (editor != null) {
                    chooserHBox.addChild((editor as DisplayObject));	
                }
                
            }
        ]]>
    </mx:Script>
    <mx:Binding source="model.getElementListModel(elementListKey)" destination="elementListModel"/>
    <mx:ArrayCollection id="list" source="{elementListModel.data.source}" filterFunction="filter"/>
    <mx:VBox id="chooserRoot">
	    <mx:HBox id="chooserHBox">
	        <mx:VBox width="100%">
	            <search:StandardSearchBox id="searchBox" width="100%" change="{applyFilter}" direction="vertical"/>
	<!--            <mx:Label text="{elementName}" fontWeight="bold" fontSize="12"/> -->
	            <mx:List id="listElements" width="100%" height="100%" change="changeSelection()" dataProvider="{list}" labelField="name" allowMultipleSelection="true"/>
	            <mx:HBox id="hBoxElementAdder">
	                <mx:Button label="Add Selected" enabled="{listElements.selectedItems.length > 0}" click="clickAddToList()"/>
	            </mx:HBox>
	        </mx:VBox>
	        <mx:VRule height="100%"/>
	        <common:EditorWrapper id="editorPanel" width="100%" editor="{editor}" enabled="{listElements.selectedItems.length == 1}" height="100%"/>
	    </mx:HBox>
    </mx:VBox>
    <mx:ControlBar horizontalAlign="right" id="controlbar1">
        <mx:Button label="Done" click="closeChooser()" id="button1"/>
    </mx:ControlBar>
    
</mx:TitleWindow>
