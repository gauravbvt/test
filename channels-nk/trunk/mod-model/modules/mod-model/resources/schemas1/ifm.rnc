namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"

# - - - - - - TYPES - - - - - - -#

## A unique object that can be referred to from somewhere else.
type_unique =
  
  ## GUID
  attribute id { xsd:ID }

## Something with a required name
type_named = element name { xsd:normalizedString }

## Something that may be described
type_described =
  
  ## constraint: not empty
  element description { text }?

## Something with a sense
type_conceptualized = sense

## That which has an information content specified by a set of categories.
type_categorized = category*

## That which is defined, discussed etc. in fragments of linked documents.
type_documented =
  element reference {
    element url { xsd:anyURI }
    & fragment*
    & element summary { text }?
  }*

## That which is located somewhere on the planet.
type_located =
  
  ## a geonames ID (see http://www.geonames.org/)
  element geoname { text }?
  & address?
  & latlong?
# - - - - - - - COMPONENTS - - - - - - -#
sense =
  
  ## A synset in wordnet. See http://wordnet.princeton.edu/perl/webwn
  element sense { text }

## A postal address.
address =
  element address {
    (element line { text }+
     | element postOfficeBox { text })
    & element city { text }
    & element stateOrProvince { text }
    & element country { text }
    & 
      ## zip, postalCode etc.
      element code { text }?
  }

## A rating of low, medium or high.
level = element level { "low" | "medium" | "high" }

## The identifier of a segment of a document.
fragment =
  
  ## an HTML anchor tag
  element anchorTag { text }
  | 
    ## a free-form specification of a section in a document
    element section { text }

## A list of one or more categories together specifying an entity.
specification = element specification { type_categorized }

## An aspect of an entity being described.
aspect =
  
  ## If an information were a form, an aspect would be a section in the form
  element aspect {
    
    ## this aspect can be repeated (e.g. 'victim' in an accident event)
    element isSet { xsd:boolean }
    & 
      ## the sense of the aspect
      type_conceptualized
    & 
      ## elements of information
      (eoi*)
    & 
      ## sub-aspects
      (aspect*)
  }

## Element of information about an entity or an aspect of an entity.
eoi =
  
  ## If an information were a form, an eoi would be a field (maybe pre-filled)
  element eoi {
    
    ## whether attribute is of the entire set of repeated aspects (e.g. victim count) or of an individual aspect (e.g. victim age).
    ##           Default: false
    element isOfSet { xsd:boolean }?
    & 
      ## the sense of the eoi
      type_conceptualized
    & 
      ## what kind of value the eoi can take. Specifid as a WordNet 3.0 sense ID
      element type { xsd:normalizedString }
    & 
      ## When no value is given, the eoi acts as a specification of needed or known 'data'.
      element value { text }?
  }

## What can be known and communicated about an entity.
##       An information should be thought of as a 'template' or 'pattern' specifying a set of 'actual information'.
##     
information = element information { (eoi | aspect)* }

## A time measurement unit
timeUnit =
  element unit { "week" | "day" | "hour" | "minute" | "second" }

## An expected length of time in some units, possibly with best and worst cases.
duration =
  element duration {
    (timeUnit
     & element expected { xsd:double }
     & # the "average" value
       element bestCase { xsd:double }?
     & # realistic best case
       element worstCase { xsd:double }?)
    # realistic worst case
    
  }

## A point in space specified by latitude and longitude.
latlong =
  element latlong {
    element latitude { xsd:double }
    & element longitude { xsd:double }
  }

## The information content of a transmission. A message encodes (formats) and possibly encrypts information.
abstract_message = encryption? & information & format?

## The kind of encryption
encryption = element encryption { type_conceptualized }

## Specifications of standing request for updates
updating =
  
  ## optional standing request to follow-up response with updates
  element updating {
    (
     ## whenever the information last sent is obsolete
     element onChange { empty }
     | 
       ## at a regular interval
       element every { duration }
     | 
       ## at certain times
       element when { timing })
    & 
      ## stop updating when some event starts or ends
      element until {
        element boundary { "start" | "end" }
        & event
      }?
  }

## A request for information or for execution of a task.
abstract_request =
  abstract_message
  & 
    ## urgency quantified
    element maxResponseDelay { duration }?

## A response to a request.
abstract_response =
  abstract_message
  & 
    ## Constraint: the transmission must be prior and with the right kind of request message (query -> answer, notif. request -> notification).
    ##               Constraint: the information in the message is composed from the 'informations' attached to the categories specifying the task.
    ##           
    transmission?

## A request to an agent to execute some kind of task.
taskRequest =
  element taskRequest {
    abstract_request
    & element toAgent { agent }
    & 
      ## constraint: taxonomy is "task#1"
      element taskSpecification { specification }
  }

## A request to be notified about specified events.
notificationRequest =
  element notificationRequest {
    abstract_request
    & 
      ## whether to notify of updates
      updating?
    & 
      ## constraint: taxonomy is "event#1"
      element eventSpecification { specification }
    & 
      ## requested points of contact for notification
      contactPoint*
  }

## A request for information presumably already being held by an agent.
query =
  element query {
    (abstract_request & updating?)
    # whether to notify of updates
    
  }

## A notification of an event.
notification =
  element notification {
    abstract_response
    & element event {
        
        ## The event the notification is about.
        ##               constraint: the information must be about the event (composed from informations attached to categories the event is tagged with)
        ##             
        event
      }
  }

## A response to a query.
answer =
  element answer {
    abstract_response
    # and?
    
  }

## An update to the information in a prior answer or notification.
update =
  element update {
    abstract_response
    # and?
    
  }

## A message of some kind
message =
  taskRequest
  | notificationRequest
  | query
  | notification
  | answer
  | update

## The cause of the start or end of an event with some probability and delay.
cause =
  element cause {
    (
     ## whether the start or end of an event is the actual cause
     element boundary { "start" | "end" }
     & 
       ## The causing event
       event?
     & element delay { duration }?
     & # default is 0
       element probability { xsd:double }?)
    # between 0 and 1 incl.
    
  }

## A valuation as monetary value or rating.
valuation =
  element valuation {
    element type { "money" | "rating" }
    & element value { xsd:double }
    & 
      ## defaults to USD for "money"
      element unit { text }?
  }

## A recurrent moment in time.
timing =
  element timing {
    (element negated { xsd:boolean }?
     & # default is false
       element months {
         list {
           "January"
           | "February"
           | "March"
           | "April"
           | "May"
           | "June"
           | "July"
           | "August"
           | "September"
           | "October"
           | "November"
           | "December"
         }
       }?
     & # None means all
       (element weekDays {
          list {
            "Sunday"
            | "Monday"
            | "Tuesday"
            | "Wednesday"
            | "Thursday"
            | "Friday"
            | "Saturday"
          }
        }
        | # none means all
          element calendarDays {
            list { xsd:int }
          })
       # 1 to 31 - none means all calendar days
       ?
     & element hours {
         (element from { xsd:int }
          & # 0-23
            element to { xsd:int })
         # 0-23
         
       }?
     & # none means all hours
       element minutes {
         (element from { xsd:int }
          & # 0-59
            element to { xsd:int })
         # 0-59
         
       }?)
    # none means whole hours
    
  }
timePeriod =
  element always { empty }
  | ((element January { empty }
      | element February { empty }
      | element March { empty }
      | element April { empty }
      | element May { empty }
      | element June { empty }
      | element July { empty }
      | element August { empty }
      | element September { empty }
      | element October { empty }
      | element November { empty }
      | element December { empty })?,
     element days {
       element from { xsd:gDay },
       element to { xsd:gDay }
     }?,
     ((element first { empty }
       | element second { empty }
       | element third { empty }
       | element fourth { empty })?,
      (element sundays { empty }
       | element mondays { empty }
       | element tuesdays { empty }
       | element wednesdays { empty }
       | element thursdays { empty }
       | element fridays { empty }
       | element saturdays { empty }))?,
     element hours {
       element from { xsd:time },
       element to { xsd:time }
     }?)

## The timing of  the availability of a resource.
availability =
  element availability {
    (element include { timePeriod }
     | element exclude { timePeriod })+
  }

## The level of reliability of a resource.
reliability = element reliability { level }
# - - - - - ELEMENTS- - - - - -#

## A uniquely identified element of an information flow model.
abstract_model_element =
  type_unique
  & type_described
  & 
    ## Links to interview data collected about this element.
    ##             could be a URL to a tiddler.
    ##           
    element note { xsd:anyURI }*

## A separate and self-contained thus identifiable model element that can be known to an agent.
abstract_entity = abstract_model_element & type_categorized

## Definition shared by all things
abstract_thing =
  abstract_entity
  & 
    ## default scope is model
    element scope { scenario | event }?
abstract_category =
  abstract_model_element & type_conceptualized & information?

## Something of significance being true somewhere for some time in a scenario. A cost/benefit valuation can be attached to an event.
abstract_event =
  
  scenario?
  & type_named
  & abstract_entity
  & 
    ## default is 'everywhere'
    type_located?
  & 
    ## default is 0 / unknown
    valuation?

## Definition shared by all linked events
abstract_linkedEvent =
  abstract_event
  & 
    ## what triggers the event (default is start of scenario)
    element trigger { cause }?
  & 
    ## 
    ##             what terminates the event (optional)
    ##             this event is mutually exclusive with other events in the same named group.
    ##           
    element terminator { cause }?
  & 
    ## constraint: the event boundary that triggers all events in the group must be the same and the sum of their trigger probabilities must be <= 1
    element mutualExclusionGroup { text }?

## Definition shared by all tasks
abstract_task =
  abstract_linkedEvent
  & 
    ## the agent doing the task; could a team created by and for the task
    agent

## Definition shared by all resources. A resource is an entity of some usefulness or capability that can be involved in an event either as agent or as a necessity
abstract_resource =
  type_named?
  & abstract_thing
  & type_located
  & type_documented
  & availability
  & reliability?
  & 
    ## how much it costs to keep the resource operational
    element maintenanceCost { valuation & timeUnit }?
  & 
    ## the organization that manages this resource
    organization

## Definition shared by all artifacts
abstract_artifact =
  abstract_resource
  & 
    ## The agent who controls (owns, is responsible for...) the artifact
    element controlledByAgent { text }?

## Definition shared by all services
abstract_service =
  abstract_resource
  & 
    ## agent who administers the service
    element administeredBy { agent }*
    
## Something immaterial that, by being true, may impact, prevent, allow or motivate communications.
abstract_fact =
    abstract_thing
    
# .....Concrete....#
model_element = category | scenario | entity 
div {
  
  ## An association between a sense and information.
  ##         The most generic hypernym allowed for all categories referenced.
  ##         Constraint: category's sense is hyponym of taxonomy sense.
  ##       
  category =
    format
    | role
    | mission
    | element category {
        attribute ref { xsd:IDREF }
        | abstract_category
      }
  
  ## An information encoding format. A format may be compatible with other formats.
  format =
    element format {
      attribute ref { xsd:IDREF }
      | (abstract_category
         >> a:documentation [ "constraint: taxonomy is format#1" ]
         & element mimetype { xsd:string }?
         & element compatibleFormats { format+ }?)
    }
  
  ## A generic role that can be played by agents. A role sets expections about expertise and defines responsibilities.
  role =
    element role {
      attribute ref { xsd:IDREF }
      | (abstract_category
         & mission*
         & element responsibility {
             element trigger { event },
             element response { task }
           }*)
    }
  
  ## The generic goals an organization or an agent in a role aspires to achieve.
  mission =
    element mission {
      attribute ref { xsd:IDREF }
      | (abstract_category
         >> a:documentation [ "Constraint: at least one child appears" ]
         & element canFurther { mission+ }?
         & element canOppose { mission+ }?)
    }
}

## A scenario is a set of potential events that cause other events and motivate information flows (sequences of transmissions of information).
scenario =
  element scenario {
    attribute ref { xsd:IDREF }
    | (abstract_model_element & type_named & type_documented)
  }
entity = thing | event

## An entity that, unless subject to an event, exists permanently and unchanged within the scope of a scenario or model.
thing =
  person
  | organization
  | resource
  | knowledge
  | informationNeed
  | requisite
  | possession
  | contactPoint
  | relationship
  |clearance
  | policy
  | element thing {
      attribute ref { xsd:IDREF }
      | abstract_thing
    }

## An identified human being who may act as more than one worker for one or more organizations.
person =
  element person {
    attribute ref { xsd:IDREF }
    | (abstract_thing
       & element firstName { text }
       & element middleName { text }?
       & element lastName { text }
       & element photo { xsd:anyURI }?
       & type_located)
  }

## An administrative structure that manages a set of resources in order to achieve one or more missions.
organization =
  element organization {
    attribute ref { xsd:IDREF }
    | (type_named
       & abstract_thing
       & type_located
       & element abbreviation { text }?
       & element logo { xsd:anyURI }?
       & element jurisdiction { type_located }?
       & element parent { organization }?)
  }
div {
  resource = agent | service | artifact
  
  ## A service is a capability (not embodied by an agent) that can be required by an agent in order to operate and function.
  service =
    channel
    | element service {
        attribute ref { xsd:IDREF }
        | abstract_service
      }
  
  ## An instance of a communication medium used for transmissions.
  channel =
    element channel {
      attribute ref { xsd:IDREF }
      | (abstract_service
         & element interoperatesWith { channel+ }?)
    }
  
  ## A physical entity (but not an agent) that may be required by an agent to successfully execute a task.
  artifact =
    document
    | element artifact {
        attribute ref { xsd:IDREF }
        | abstract_artifact
      }
  
  ## An artifact that contains information, such as a book or a printed report.
  document =
    element document {
      attribute ref { xsd:IDREF }
      | (abstract_artifact & information*)
    }
}
div {
  
  ## Abstract
  event = complexEvent | linkedEvent | timeEvent
  
  ## An event which is triggered and possibly terminated by the starting or ending of events.
  ##         Constraint: An event can be terminated by its own start, but not its own end
  ##         Constraint: If an event is triggered by the end of an event, it can not be terminated by the start of the same event.
  ##         Constraint: Event causality must form a directed, acyclical graph.
  ##       
  linkedEvent =
    task
    | regulatoryEvent
    | issue
    | 
      ## Either all listed events are concurrently happening, anyone is happening, excatly one is happening, or none is happening.
      ##             A complex event can reoccur many times during a scenario for different validations of the boolean relation (one ORed event happens, then later another etc.)
      element linkedEvent {
        attribute ref { xsd:IDREF }
        | abstract_linkedEvent
      }
  
  ## A complex event combines a list of event via a boolean relation on an implied 'is_happening(Event)' predicate. It happens while the boolean relation holds for all listed events.
  complexEvent =
    element complexEvent {
      attribute ref { xsd:IDREF }
      | (element op { "and" | "or" | "xor" | "not" }
         & 
           ## all events are occurring, any one event is, only one is, none is
           abstract_event
         & 
           ## The location determines the timezone in effect (different times in different locations)
           (event+))
    }
  
  ## The current time is within some recurring time interval.
  timeEvent =
    element timeEvent {
      attribute ref { xsd:IDREF }
      | (abstract_event & timing)
    }
  
  ## Something is being done by one or more agents to effect or prevent some change (i.e. to start, end events or keep events from either).
  task =
    communication
    | remediation
    | transmission
    | element task {
        attribute ref { xsd:IDREF }
        | abstract_task
      }
  
  ## A task that realizes a sharing of information from one agent to another.
  communication =
    element communication {
      attribute ref { xsd:IDREF }
      | (abstract_task
         & information
         & element targetAgent { agent })
    }
  
  ## Task of sending a message or batch of messages from one agent directly to another.
  transmission =
    element transmission {
      attribute ref { xsd:IDREF }
      | (abstract_task
         & message+
         & ((channel
             & 
               ## channel used for sending and contact point of receiving agent
               contactPoint)
            | 
              ## or the transmission is face to face with the receiving agent
              element faceToFaceWith { agent }))
    }
  
  ## A task that aims to terminate an issue.
  remediation =
    element remediation {
      attribute ref { xsd:IDREF }
      | (abstract_task & issue)
    }
  
  ## A problem with an entity
  issue =
    element issue {
      attribute ref { xsd:IDREF }
      | (abstract_linkedEvent & entity)
    }
  
  ## A policy is being disobeyed or obeyed by a task.
  regulatoryEvent =
    
    ## by default the regulatory event is about an infraction
    element regulatoryEvent {
      attribute ref { xsd:IDREF }
      | (element isInfraction { xsd:boolean }?
         & abstract_linkedEvent
         & policy)
    }
}
div {
  
  ## A resource that can autonomously execute a task.
  abstract_agent = abstract_resource
  agent = worker | group | team | system
  
  ## A role-based position held by a person in an organization.
  worker =
    element worker {
      attribute ref { xsd:IDREF }
      | (abstract_agent & person?)
    }
  
  ## A group of functionally undistinguishable workers.
  group =
    element group {
      attribute ref { xsd:IDREF }
      | (abstract_agent
         & 
           ## number of workers in group whenever available
           element count { xsd:int })
    }
  
  ## A team of workers possibly from different organizations acting as a unit.    
  team =
    element team {
      attribute ref { xsd:IDREF }
      | (abstract_agent & worker+)
    }
  
  ## A non-human resource that can has any combination of repository, sensor and actuator capabilities.
  system =
    element system {
      attribute ref { xsd:IDREF }
      | (abstract_agent
         & element isRepository { xsd:boolean }
         & element isSensor { xsd:boolean }
         & element isActuator { xsd:boolean })
    }
}

## Information is needed by an agent with some urgency in one of a number of formats.
informationNeed =
  element informationNeed {
    attribute ref { xsd:IDREF }
    | (abstract_fact
       & agent
       & information
       & 
         ## between the earliest time of notification or since requested
         element maximumDelay { duration }
       & element criticality { level })
  }

## The holding of information of  by an agent. The agent has more or less confidence in the correctness of the information. Knowledge can be negated to represent absence of knowledge.
knowledge =
  element knowledge {
    attribute ref { xsd:IDREF }
    | (
       ## default is false
       element negated { xsd:boolean }?
       & abstract_fact
       & agent
       & information
       & 
         ## default is 'high'
         element confidence { level }?)
  }

## An agent requires that a resource be available in order for it to be generally operational, or be capable of executing a given task.
requisite =
  element requisite {
    attribute ref { xsd:IDREF }
    | (abstract_fact
       & agent
       & element resource { resource }
       & availability)
  }

## An artifact is in the possession of an agent.
possession =
  element possession {
    attribute ref { xsd:IDREF }
    | (abstract_fact & artifact & agent)
  }

## Point of contact to some agent over some channel. A Point of Contact may require authentication by the agent.
contactPoint =
  element contactPoint {
    attribute ref { xsd:IDREF }
    | (abstract_fact
       & (agent | organization)
       & channel
       & 
         ## default is false - - TODO: this is inadequate modeling of permissioning
         element authenticationRequired { empty }?
       & element endpoint { text })
  }

## A relationship, categorization and trust level, between two agents.
relationship =
  element relationship {
    attribute ref { xsd:IDREF }
    | (abstract_fact
       & element fromAgent { agent }
       & element toAgent { agent })
  }

## The security clearance of a person.
clearance =
  element clearance {
    attribute ref { xsd:IDREF }
    | (abstract_fact 
        & 
          ## the organization that granted the clearance
          organization
        & 
          ## the person who is cleared
          person
        &
          ## when it expires
          element terminationDate { xsd:date })
  }


## A law, mandate, directive etc. from an organization that either obligates or forbids a kind of task done somewhere by agents in any of a given set of roles.
policy =
  element policy {
    attribute ref { xsd:IDREF }
    | (abstract_fact
       & type_documented
       & element authority { organization }
       & element appliesTo {
           type_located
           & element taskSpecification { specification }
           & role*
         }
       & element intent { "forbid" | "obligate" })
  }

# - - - - - Project elements - - - - - - - - -#

## Descriptive information for the project
project =
  element project {
    type_unique, type_named, type_described, organization
  }
  
project_element =
    journalEntry |
    question |
    answerToQuestion |
    participant

## A user having access to one or more models.
participant =
  element participant {
    attribute ref { xsd:IDREF }
    | (type_unique
       & 
         ## If user is an administrator of the project. Default: false.
         element isAdmin { xsd:boolean }?
       & element userName { text }
       & element password { text }
       & element email { text }
       & element projectId { text }*
       & 
         ## If participant is a person represented in the model
         person?)
  }

## A dated text with some tagged "selections" about model elements
journalEntry =
  element journalEntry {
    element date { xsd:dateTime }
    & element content { text }
    & element selections {
        element from { xsd:int }
        & element to { xsd:int }
        & model_element
      }*
  }
question =
  
  ## A question for participants usually about a model element.
  ##         Default is "all participants"
  element question {
    attribute ref { xsd:IDREF }
    | (type_unique
       & 
         ## GUID  of unique object or element
         element about { text }
       & element content { text }
       & participant*)
  }

## An answer from one or more participants to a question
answerToQuestion =
  element answerToQuestion {
    attribute ref { xsd:IDREF }
    | (type_unique
       & question
       & element content { text }
       & participant*)
  }
  
#------------- Application objects ---------------------#

application_object =
    (analysis)
    
## An analytical result about an element of the model (this is always inferred)
analysis =
  element analysis {
    (attribute ref { xsd:IDREF }) 
    | (type_unique
       & type_described
       & element about {model_element}
       & value*
       & valueGroup*)
  }

## A named value
value =
  element value {
    element name { text }
  }

## A named group of values
valueGroup =
  element valueGroup {
    element name { text }
    & value+
  }

# - - - - - - Project - - - - - -#

# One database per project
start =
  
  ## A project is a model, its elements and the project's participants.
  element db {
    project
    & project_element*
    & model_element*
    & application_object*
  }
