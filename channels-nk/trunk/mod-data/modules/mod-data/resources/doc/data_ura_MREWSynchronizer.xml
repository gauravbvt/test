<?xml version="1.0" encoding="UTF-8"?>
<document>
  <title>channels_data_MREWSynchronizer</title>
  <!--***************Cascading Style Sheets***************-->
  <csslist>
    <css>/xlib/styles/css_ten60_lnf.css</css>
    <css>/xlib/styles/xmlverbatim.css</css>
  </csslist>
  <!--***************Links***************-->
  <links>
  </links>
  <!--***************Table of Contents***************-->
  <toc>
    <section name="title"/>
    <section name="definition"/>
    <section name="purpose"/>
  </toc>
  
  <section name="title" styleuri="/xusr/share/doc/styles_1060/style_title.xsl">
    <content>
      <name>MREWSynchronizer</name>
      <text>Multiple Reads Exclusive Write Synchronizer</text>
    </content>
  </section>
  
  <section name="definition"
    styleuri="/xusr/share/doc/styles_1060/style_definition.xsl">
    <content>
      <module>urn:com:mindalliance:channels:data</module>
      <format>
        <sub name="format"/>
      </format>
      <returns>
        <b>t</b>
      </returns>
      <syntax>
        <type>
          <b>MREWSynchronizer</b>
        </type>
        <operator req="true">beginRead, endRead, beginWrite or endWrite</operator>
        <target req="false">always returns true</target>
      </syntax>
    </content>
    <includes>
      <include name="format" type="xml">
        <instr>
          <type>MREWSynchronizer</type>
          <operator>
            beginRead
          </operator>
          <target>this:response</target>
        </instr>
      </include>
    </includes>
  </section>
  
  <section name="purpose" styleuri="/xusr/share/doc/styles_1060/style_basic.xsl">
    <content>
      <p> The
        <code>MREWSynchronizer</code> accessor implements a Multiple Reads Exclusive Write Synchronizer as defined in
        http://www.eonclash.com/Tutorials/Multithreading/MartinHarvey1.1/Ch11.html. Calls to MREWSynchronizer are made
        at the beginningand at the end of concurrent data access operations.
        </p>
      <p>The behavior is as follows:
        <ul>
          <li>Read operations, bracketed by beginRead and endRead, can execute concurrently.</li>
          <li>Write operations, bracketed by beginWrite and endWrite, cannot execute at the same time as read operations.</li>
          <li>Write operations cannot execute at the same time as write operations.</li>
        </ul>
      </p>
      <p>
        From the specifications: "There is an asymmetry in the synchronization scheme: threads potentially wanting to read 
        will block before reading if there are any active writers, whilst threads wanting to write 
        block before writing if there are any reading readers. This gives priority to writing threads; 
        a sensible approach, given that writes are less frequent than reads."
     </p>
    </content>
    <includes/>
  </section>
</document>