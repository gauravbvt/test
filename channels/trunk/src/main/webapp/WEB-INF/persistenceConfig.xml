<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation" value="/WEB-INF/ehcache.xml"/>
    </bean>

    <bean id="resultCache" class="com.mindalliance.channels.query.ResultCache">
        <property name="cacheKey" value="results"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <bean id="cacheSet" class="com.mindalliance.channels.query.CacheAdvice">
        <property name="cache" ref="resultCache"/>
    </bean>

    <bean id="cacheClear" class="com.mindalliance.channels.query.CacheResetAdvice">
        <property name="cache" ref="resultCache"/>
    </bean>

    <bean id="permCache" class="com.mindalliance.channels.query.ResultCache">
        <property name="cacheKey" value="longTerm"/>
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <bean id="permSet" class="com.mindalliance.channels.query.CacheAdvice">
        <property name="cache" ref="permCache"/>
    </bean>
    <bean id="permClear" class="com.mindalliance.channels.query.CacheResetAdvice">
        <property name="cache" ref="permCache"/>
    </bean>

    <aop:config proxy-target-class="true">
        <!-- Temporary caching refreshed when model is changed -->
        <aop:advisor pointcut="execution(java.util.List com.mindalliance.channels.QueryService.*(..))"
                     advice-ref="cacheSet"/>
        <aop:advisor pointcut="execution(java.util.List com.mindalliance.channels.Detective.*(..))"
                     advice-ref="cacheSet"/>
        <aop:advisor pointcut="execution(String com.mindalliance.channels.Analyst.*(..))"
                     advice-ref="cacheSet"/>
        <aop:advisor pointcut="execution(Boolean com.mindalliance.channels.Analyst.*(..))"
                     advice-ref="cacheSet"/>
        <aop:advisor pointcut="execution(Integer com.mindalliance.channels.Analyst.*(..))"
                     advice-ref="cacheSet"/>
        <aop:advisor pointcut="execution(com.mindalliance.channels.graph.Diagram com.mindalliance.channels.DiagramFactory.*(..))"
                     advice-ref="cacheSet"/>
        <!-- Permanent caching -->
        <aop:advisor pointcut="execution(String com.mindalliance.channels.GeoService.getGeoCoding(..))"
                     advice-ref="permSet"/>
        <aop:advisor pointcut="execution(java.util.List com.mindalliance.channels.GeoService.findNearbyPostalCodes(..))"
                     advice-ref="permSet"/>
        <aop:advisor pointcut="execution(Boolean com.mindalliance.channels.GeoService.verifyPostalCode(..))"
                     advice-ref="permSet"/>
        <aop:advisor pointcut="execution(Boolean com.mindalliance.channels.GeoService.isPostalCodeInGeoLocation(..))"
                     advice-ref="permSet"/>
        <aop:advisor pointcut="execution(Boolean com.mindalliance.channels.GeoService.isLikelyGeoname(..))"
                      advice-ref="permSet"/>
        <aop:advisor pointcut="execution(java.util.List com.mindalliance.channels.GeoService.findGeoLocations(..))"
                       advice-ref="permSet"/>
        <aop:advisor pointcut="execution(Boolean com.mindalliance.channels.SemanticMatcher.matches(..))"
                     advice-ref="permSet"/>
        <aop:advisor pointcut="execution(com.mindalliance.channels.nlp.Proximity com.mindalliance.channels.SemanticMatcher.semanticProximity(..))"
                      advice-ref="permSet"/>
        <aop:advisor pointcut="execution(Double com.mindalliance.channels.SemanticMatcher.assessSimilarity(..))"
                       advice-ref="permSet"/>
        <aop:advisor pointcut="execution(net.didion.jwnl.data.IndexWord com.mindalliance.channels.SemanticMatcher.lookupBaseForm(..))"
                       advice-ref="permSet"/>
        <!-- Temporary caching trigger -->
        <aop:advisor pointcut="execution(* com.mindalliance.channels.dao.PlanManager.onAfterCommand(..))"
                     advice-ref="cacheClear"/>
    </aop:config>

    <bean id="planManager" class="com.mindalliance.channels.dao.PlanManager">
        <property name="idGenerator" ref="idGenerator"/>
        <property name="importExportFactory" ref="serializer"/>
        <property name="importDirectory" value="file:${user.home}/channels/import"/>
        <property name="planDefinitionsFileName" value="channels/plans.properties"/>
        <property name="defaultPlanDefinitions" value="/WEB-INF/plans.properties"/>
        <property name="surveysFileName" value="surveys"/>
        <property name="uploadsDirName" value="uploads"/>
<!--
        <property name="plans">
            <list value-type="java.util.ArrayList">
                <bean class="com.mindalliance.channels.model.Plan">
                   <property name="uri" value="mindalliance.com/channels/plans/acme"/>
                    <property name="name" value="ACME Emergency Communications Plan"/>
                    <property name="client" value="ACME Manufacturing, Inc."/>
                    <property name="description"
                              value="Communications planning for responding and recovering from business interruptions due fire or power outage."/>
                </bean>
            </list>
        </property>
-->
        <property name="dataDirectory" value="file:${user.home}/channels/data"/>
        <property name="snapshotThreshold" value="10"/>
    </bean>

</beans>
