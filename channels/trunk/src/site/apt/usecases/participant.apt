	----------------------
	Participant Use Cases
	----------------------

Participant Use Cases
	
* What is a participant?

	A participant is a user who is authorized by the liaison of an organization to participate 
	in projects in which the organization is invited, representing the role(s) he/she plays in that organization.
	A participant may be given the status of contributor or guest in a project. 
	
	The difference between a contributing participant and a guest participant is that a guest can not create, publish nor build scenarios.
	
	A user who plays many roles or roles in more than one organization would login only once but would assume one "persona" at a time within a project to indicate
	on behalf of what role and organization he/she is making each contribution. A user can set a default persona that is set after each login.

	
* What can participants do?

	* {{{#modify_profile} Modify profile}}
	
	* {{{#browse_projects} Browse projects}}
	
	* {{{#search_projects} Search projects}}
	
	* {{{#assume_persona} Assume persona}}
	
	* {{{#create_and_publish_scenarios} Create and publish scenarios}}
	
	* {{{#build_scenario} Build scenario}}
	
	* {{{#view_scenario} View scenario}}
	
	* {{{#open_analytical_view} Open analytical view}}
	
	* {{{#query_project} Query project}}
	
	* {{{#open_dashboard} Open dashboard}}
	
	* {{{#generate_report} Generate report}}
	
	* {{{#invite_user} Invite user}}
	
	* {{{#chat} Chat}}
	
	* {{{#todos} Todos}}
	
	* {{{#alerts} Alerts}}
	
	[]

** {Modify profile}

	A participant's profile is information that describes the participant in any of the projects he/she may participate in.
	This augments the identity information in the user profile (the user will likely manage both user and participant profiles together).

	A participant can:
	
	* {{{#view_roles} View roles}}
	
	* {{{#add_role} Add role}}
	
	* {{{#remove_role} Remove role}}
	
	* {{{#request_certification_change} Request certification change}}
	
	* {{{#edit_role} Edit role}}
	
	* {{{#edit_contact_info} Edit contact info}}
	
	[]

*** {View roles}

	A participant can view within his/her profile all the roles assigned to him/her. Each role may or may not have been certified by a liaison for that role's organization.
	If not certified, the user can readily request such certification.
	
	The user can also request to see a list of all other participants in shared projects with any of the same role types describing a role.

*** {Add role}

	A participant can add in a profile a role played in an organization.
	The role is not certified (unless the participant is a liaison for that organization).
	The participant can request certification from a liaison.

*** {Remove role}

	A participant can remove a role he/she has authority over that has yet to be certified. 
	Once certified, a participant would first request de-certification from the liasion for that role's organization.
	
*** {Request certification change}

	A participant can select a role in a profile and request from an organization's liaison that the role be 
	
	* certified to indicate that the participant plays this role within this organization,
	* decertified to indicate that the participant is no longer playing this role within this organization.
	
*** {Edit role}

	A participant can describe a role as he/she would for any other element. See {{{#describe_element} Describe element}}

*** {Edit contact info}

	A participant can add/describe end points and their availabilities.
	
	 - More TBD -

** {Browse projects}

	The user is presented with a list of all named projects in which he/she is a manager, participant or guest.
	The user can select a project to see all named models created in this project.
	The user can select one, many or all models and view all named scenarios in the selected model(s).
	
	The participant can view:
	
	* the past and current popularity of a model and scenario (as contributions over time and number of contributors) 
	
	* the informal description and the objectives of a selected project and model (about),
	
	* the informal description of a selected scenario (about),
	
	* the list of all participants in a selected project,
	
	* the list of all contributors to a selected model or scenario.
	
	[]
	
	The user can do {{{#search projects}keyword searches}} on projects.
	
** {Search projects}

	While browsing authorized projects, the user can search them using keywords. The search will retrieve projects, models, scenarios and 
	scenario elements that contain any/all of the keywords in their descriptions.
	
	The search results shows the "containment path" of each result (project/model/scenario/event etc.).
	A link to each result and let's the user open a default viewer on it or any element that contains it.
	
** {View a scenario}

	The participant can examine a scenario along multiple perspectives:
	
	* A timeline of events, reponse tasks, task outcomes and environments (where communication channels are restricted and/or a different set of policies apply),
	
	* A geographical mapping of the above occurences and agents involved,
	
	* A social network connecting the agents and organizations involved
	
	* A list of information exchanges required in order to execute the above response tasks.
	
	[]
	
	The timeline is the principal view. The timeline elements can be multi-selected. Selecting elements in it
	makes them or related elements appear in the other perspectives. Selecting none is the same as selecting all
	(selection equates focusing).
	
	Selecting one or more timeline elements will make all their related agents (i.e who carries out the response tasks and
	what organizations they are from) appear in the social net and in the map; the exchanges they necessitate also appear in
	as a tabular list of exchanges.
		
** {Assume persona}

	A participant can "wear many hats", that is, he/she may be playing different roles in more than one organization. When making assertions, the participant can
	authoritatively say something about himself/herself in a given role, or the participant may express an opinion about some other role, possibly not in his/her organization.
	In both cases, the user makes a contribution to the project as someone in a given role in a given organization.
	
	Before making any contribution, the participant must assume as persona one of the roles he/she plays in an organization. That persona is in effect until the participant
	changes it. The default persona is a user setting.
	
** {Create and publish scenarios}

	Any participant can create and publish a scenario in a project but only a manager for that project can close or even delete a scenario once it has been published.
	Until a scenario is published, it is considered a draft and is visible and modifiable only by the participant who created it. 
	
	A participant first creates a draft scenario, describes it and minimally builds it before publishing it so that others can see it and take part in building it.
	A draft scenario can only be deleted by the participant who created it.
	
	The participant can:
	
	* {{{#create_a_draft_scenario} Create a draft scenario}}
	
	* {{{#initialize_a_draft_scenario} Initialize a draft scenario}}
	
	* {{{#delete_a_draft_scenario} Delete a draft scenario}}
	
	* {{{#publish_a_draft_scenario} Publish a draft scenario}}

	[]

*** {Create a draft scenario}

	The participant selects a model in a project and requests that a scenario be created. 
	A form appears in which the user enters:
	
	 * a name,
	 
	 * an informal description,
	 
	 * objectives for the scenario
	 
	 []
	 
	 The participant can submit the form or cancel the creation of a draft scenario. Upon submitting, the scenario viewer is opened on the draft scenario for it to be initialized.
	 	 
*** {Initialize a draft scenario}
	 
	 If the scenario viewer is not open on a draft scenario, the participant can access a list of draft scenarios, select one of them and open a scenario viewer on it.
	 The participant can then add the incidents (defining events) and environments that will impose constraints on resources and alter the policy landscape.
	 The participant can build up the scenario as much as desired while it is in draft mode.
	 
	 The other scenarios visible to the participant are searched for similarities (based on event types of incidents primarily) and brought to the attention of the participant,
	 the goal being to avoid the creation of redundant scenarios.

*** {Delete a draft scenario}

	The participant selects a draft scenario and requests its deletion. The participant is asked for confirmation before permanently removing the draft scenario.
	The participant can cancel the deletion.

*** {Publish a draft scenario}

	The participant selects one of his/her draft scenarios and requests that it be published. If the scenario is insufficiently initialized (e.g. no incident or objectives), then the request
	is rejected and the participant is told why.
	
	If the scenario is successfully published, it then becomes visible to other participants. The participant retains authoritive editing rights to the elements that were defined
	prior to publishing the scenario and to all incidents (events that don't have other scenario elements as cause). In other words, other participants are not allowed to change
	the nature of the scenario; they are only allowed to elaborate on it.
	
	The publication of a scenario is an event of which all participants are notified.

** {Build a scenario}

	A participant contributes to a scenario by making assertions about existing elements in the scenario. An element is anything that composes a scenario such as events,
	tasks, outcomes, exchanges, and assertions made about them. This means that assertions can be made about assertions where meaningful (e.g. "I need to know if he knows")

	The participant can:
	
	* {{{#make_assertions} Make assertions}}
	
	* {{{#add_event} Add event}}
	
	* {{{#add_outcome} Add outcome}}
	
	* {{{#add_agent} Add agent}}
	
	* {{{#add_organization} Add organization}}
	
	* {{{#describe_element} Describe element}}
	
	* {{{#accept_or_reject_a_suggested_element} Accept or reject a suggested element}}
	
	* {{{#mark_an_element_as_relevant_or_not} Mark an element as relevant or not}}
	
	[]

*** {Make assertions}

	An assertion is a statement about a scenario element indicating that information is needed or available, or that a given event is to be responded to by the execution of a task,
	or that access to given agent is authorized, or that a given information exchange is agreed to. These assertions are either made authoritatively for one of the participant's
	persona (one of the roles he/she plays), or, meant as an opinion, for some other role in some organization.

	The participant can make the following assertions:
	
	* {{{#needs_to_know} Needs to know}}
	
	* {{{#knows} Knows}}
	
	* {{{#responds_to} Responds to}}
	
	* {{{#can_access} Can access}}
	
	* {{{#agrees_to} Agrees to}}
	
	[]
	
**** {Needs to know}

	The participant selects a scenario element anywhere it is shown (from a timeline, map, exchanges list etc.) and "tags" it with a "needs to know".
	The participant indicates who needs to know (default = current persona, else selects from other persona or a list of roles in organizations) and describes the need further.
	
	The participant can later modify or remove the assertion.

**** {Knows}

	The participant selects a scenario element anywhere it is shown (from a timeline, map, exchanges list etc.) and "tags" it with a "knows".

	The participant indicates who knows (default = current persona, else selects from other persona or a list of roles in organizations).

	An information asset is created and is attached to the assertion.

	The participant describes the information asset further.
	
	The participant can later modify or remove the assertion.

**** {Responds to}

	The participant selects an event already described in a scenario and tags it with "responds to".
	The participant indicates who responds to the event (default = current persona, else selects from other persona or a list of roles in organizations). A task is automatically created and added to the scenario. The participant selects it and describes it.
	
	Alternately, the participant selects a task already described in the scenario and tags it with "also responds".
	The participant indicates who else also responds to the event by executing this task (default = current persona, else selects from other persona or a list of roles in organizations).
	
	The participant can later modify or remove the assertion.

**** {Can access}

	The participant selects an agent already described in a scenario and tags it with "can access" (meaning "has been granted access").

	The participant indicates who has been granted access to the agent (default = current persona, else selects from other persona or a list of roles in organizations).

	The participant may qualify this granted access by restricting it to one or more of the scenario's environments.

	The participant can later modify or remove the assertion.

**** {Agrees to}

	The participant selects an exchange already described in a scenario and tags it with "agree to" (meaning "has been granted access") only if one of the
	participant's persona is one of the agents represented in the exchange. 

	If the persona is on the receiving end, then the participant indicates willingness to receive the information.
	If the persona is on the sending end, then the participant indicates willingness to send the information.

	The participant may qualify this agreement to exchange information by restricting it to one or more of the scenario's environments.

	The participant can later modify or remove the assertion.

*** {Add event}

	The participant selects an existing element of the scenario that can be a source of events and selects from a list of types of events that this element can generate.
	An event is created over which the participant has authority and is attached to its causal element. 
	The participant can further describe the event.

	<Note that only a participant with authority over a scenario (its creator or the project manager) can add an event with no scenario element as its cause (i.e. an incident).>

*** {Add outcome}

	The participant selects an existing task in the scenario and adds an outcome to it.
	The participant describes the outcome.
	
*** {Add agent}

	An agent can be a role, a person or an information resource. One may need to introduce an agent in a scenario that is not represented by a participant.
	A participant creates a role or an information resource within a project and describes it. This may be done from anywhere in a project but the action should be readily available
	wherever a participant makes an assertion and needs to identify an agent.

	If the agent is described as belonging to an organization and there is a liaison for that organization (now or later), then the liaison has authority over the agent's description.
	Otherwise the agent is a public element visible to all projects.
	
	If the agent is a role and a participant joins the projet for that role (the description of a role includes the identity of an organization), then this participant acquires authority over the
	until then public agent description.

*** {Add organization}

	One may need to introduce an organization for which there is no liaison.
	A participant creates an organization and describes it. This may be done anywhere in a project but should be readily available wherever a participant describes an agent.
	
	If the organization later gains a liaison, that liaison acquires authority over the description of the organization.
	Until then, the description of the organization is a public system element (visible to all projects).

*** {Describe element}

	A participant generally can modify the description of any editable element in Channels he/she can access.
	When a participant creates an element, he/she must minimally describe it before it is added.
	
	An element is anything that appears in a scenario or is referenced by that element.
	<<The participant should be able to select an element wherever and however it is shown (in a list, a map, a graph, an editor etc.) and
	be able to request to edit it.>> 
	
	If the participant has contributor status in the current project, the editor opens as "read/write", else it opens as "read-only".
	
	Changes are not submitted until the participant "presses the submit button".
	On submit, if any validation rule fail, submission fails and the participant is alerted and given a chance to make corrections.
	
	In the meanwhile, someone else may also be editing the same element. When that happens, the participant is notified (visual cue?) about it and can
	access the list of these other participants. 

	If none of the participant is authoritative, then all participants can make modifications at once with the same effect as if they were doing it sequentially.

	If at least one of the participant has authority over the element, then the other participants are appropriately alerted  (visual cue?) since this participant's
	edits may override the other participants' edits. When a participant hits the "reset" button, the editor is refreshed to reflect the current state of the element,
	taking into account the latest submitted edits.
	
	Each property is restricted as to what kinds of values it can have. 
	The user either enters the value by hand or selects it using some UI device (calendar for date, slider for numerical value, type tree for types, a modal editor for "complex" values etc.)
	The changes to property values are validated.

**** {Authority vs opinions}
	
	The participant can edit an element either with or without authority.

	The system determines whether the user <in a given persona> has authority over an element (e.g. a participant has authority over his/her own profile).

	Often, when a participant adds a new element, he/she automatically acquires authority over it for as long as he/she retains the privileges that allowed this addition.

	Authority over an element can be shared, for example, a participant, his/her organizational liaison and the project's manager can all have either direct or
	indirect authority over the description of an event in a scenario. 
	
	Authority can be <<direct>>, for example, a participant has authority over a Task he/she is said to execute, 
	A manager has direct authority over the description of a project and the models within.
	A liaison has direct authority over the description of an organization and of the roles within.
	
	Authority can be <<indirect>>:
	
	* A liaison for an organization has authority over all elements a participant 
	in a given persona where he/she is member of that organization has authority over.
	
	* A project manager has indirect authority over all elements a participant added to that project.
	
	[]
	
	<An element for which there is no direct authority is said to be "public".>
	
	When a non-authoritative participant sets or changes the value of an element's property, this it is considered an opinion and it is recorded with other opinions.

	When an authoritative participant sets or changes the value of an element's property, it overrides all and any opinions, or any previous authoritative value, and becomes the effective value.
	In the absence of an authoritative property value, the majority opinion is the effective value. In case of a tie, the oldest of the tied opinions wins.
	
	The opinions and authoritative values are available for perusal. All opinions, their counts and their contributors can be viewed.
	A participant can readily see his/her contribution to an element's property value and whether it differs from the effective value.
	
*** {Accept or reject a suggested element}

	The system can infer new elements (issues, todos, exchanges etc.) on the basis of existing elements.
	When it does, the systems can add them tentatively as suggestions to be accepted or rejected.
	Note that the system may later retract the element if the conditions that lead to its inference are no longer present.
	
	<What happens then to participant-added elements that refer to a retracted element?>
	
	A participant with access to a suggested element can reject or accept it.
	The participant can be authoritative or not. If not, then the participant expresses an opinion as to the validity of the suggestion. Opinions are cumulated and the
	prevailing yeah/neah vote is the effective. If an authoritative participant accepts or rejects it, then it is so.
	
	Rejected, suggested elements are accessible and visible to participants (with visual cue?) so that they can weigh in (opinions) or decree (authoritative) otherwise.
	
*** {Mark an element as relevant or not}

	Any participant in a project can add elements specific to a scenario (events, tasks, outcomes, assertions etc.) or global to a project (mostly organizations and agents). 
	Just as participants may have differing opinions about the values of element properties (e.g. is this outcome likely or not?), they can also
	have differing opinions about whether elements should be included at all in a scenario (e.g. I don't think that agent X should need to know Y).

	A participant with authority over an element can impose relevance or irrelevance on that element, in spite of opposing opinions.
	When no authoritative statement has been made about the relevance of an element, the majority opinion wins. In case of a tie, the first
	opinion entered breaks the tie.
	An opinion or authoritative statement made by a participant who has lost contributor status for the project is ineffective (but retained).
	
	An element considered irrelevant does not participate in the inferrence of other elements.
	
	A participant can:
	
	* select an element and mark it as relevant or irrelevant, possibly reversing a prior statement

	* view metrics (how many yeahs vs neahs)

	* view the identity of the participants who made statements, authoritative or not (and their personae)

	* identify visually the relevance status of an element.
	
	[]

** {Open analytical view}

	The participant has a choice of a number of analytical views. The participant can:
	
	* {{{#open_a_causal_graph} Open a causal graph}}
	
	* {{{#open_a_flow_graph} Open a flow graph}}
	
	* {{{#open_a_communications_graph} Open a communications graph}}
	
	* {{{#open_an_issues_analysis} Open an issues analysis}}

	* {{{#open_a_semantic_graph} Open a semantic graph}}	
	
	[]
	
	In each analytical views, the participant can select a displayed element and:
	
	* open an editor to {{{#describe_element} describe it}},
	
	* open applicable analytical views on it,
	
	* make applicable {{{#make_assertions} assertions}} on it,
	
	* mark it as relevant or not
	
	[]

*** {Open a causal graph}

	The participant selects a scenario or an event and requests a causal graph.

	The causal graph shows the scenario's incidents or the selected event connected to all events that cause it or are caused by it.

	The participant can select an event and expand it to reveal its caused/causing events that are not yet showing.

	The participant can select an event and collapse it, hiding its caused/causing events that are showing.


*** {Open a flow graph}

	The participant selects a scenario and requests a flow graph.
	
	The flow graph shows how agents, possibly within tasks, are connected by required exchanges in a scenario.
	
	The participant can:
	
	* Zoom in and out, and pan.
	
	* Select an exchange and {{{open_a_communications_graph} open a communications graph}} that shows how that exchange can be realized.
	
	* Select an exchange that is marked as having issues and {{{open_an_issues_analysis} open an issues analysis}} on that exchange.
	
	* Filter out agents by kind (Role vs Resource), by type or by organization.
	
	* Show only exchanges that connect to and from a sender/recipient agent.
	
	[]
	
*** {Open a communications graph}

	The participant selects an exchange and requests a communications graph. 
	
	The graph shows all alternate sequences of requests and notifications that can realize the exchange.
	
	the participant can:
	
	* Zoom in and out, and pan.
	
	* See metrics (delay, security, privacy, reliability) for a sequence or an individual communication.

	[]
	
*** { Open an issues analysis}

	The participant selects an element to which one or more issues are attached  (exchange, need to know, communication etc.)
	and requests an issues analysis.
	
	The issues analysis graphically displays the tasks that can fail directly or indirectly via information dependencies
	(e.g. Task A causes Agent X to know Y which is critically needed by Task B, thus failing Task A can cause Task B to fail etc.)
	
	The user can follow a possible chain of failure and view the consequences of each (missing outcomes), and view the aggregated, downstream consequences
	at each point of the chain. If a suggested solution is attached to an issue, it is readily accessible for viewing.
	
	The participant can:
	
	* Expand and collapse issue or at-risk task
	
	* View a summary of immediate and aggregated consequences
	
	* Zoom-in/out and pan
	
	[]
	
	

*** {Open a semantic graph}

	The participant selects an element and requests that a semantic graph be opened on it.
	
	A semantic graph is a diagrammatic view of an element and elements related to it by one or more degrees of separation. 

	The centered element is the one "in focus". Expanding an element in the diagram shows those that are one degree of separation from it. 
	An element can also be collapsed (its uniquely related elements disappear). 

	An element showing in the diagram can be selected as the new focus. 

	Different kinds of elements may be represented differently (different shapes or overlayed icons). 
	Relationships are displayed either as edges or as overlays.

	The participant can:
	
	* Expand/collapse an element
	
	* Zoom-in/out and pan
	
	* Change focus
		
	* Go backward/forward (in focus selection and expanded/collapsed state)
	
	[]
	
** {Query project}

	A project can be {{{#search_projects} searched}} for specific elements via keywords. It can also be searched with a "finder" using queries expressed in terms
	of the properties of its elements.
	
	A finder is opened in the context of a project, model or scenario, which sets its scope. If at the project scope, the user is given a choice among the kinds of data elements that relate directly to projects. Once the choice is made, the first table appears populated with all instances of this kind that relate directly to the project. Underneath the table the user is given a choice of data element kinds for the next table and so on.

	Each finder comes with a number of pre-defined bookmarks for common queries, such as all "my unresolved issues", "all organizations participating in a project" etc.
	
	The participant  can:

	* Select the scope of a query (project, model or scenario)
	
	* Choose the kind of elements queried
	
	* See all such elements related to the element that sets scope of the query
	
	* Filter, sort these elements, and see more or less of their properties 
	
	* Select some/all/none (none = all) of these elements and make them the scope of the next query, etc.
	
	* Roll back to previous scope
	
	* Go backward/forward (going thru the history of "finder states")
	
	[]

** {Open dashboard}

	A dashboard is a collection of indicators, metrics, trends that are computed within a scope and
	displayed visually. There are different kinds of dashboards for system, organization and scenario monitoring.
	
	Depending on the kind of dashboard, the scope can be the system, a project, a model,
	a scenario, an organization, a user etc. A user can not ask for a dashboard that contains information derived from elements the user does not have access to.
	
	A participant can request dashboards as authorized (a participant can not get a system dashboard or 
	a dashboard on any organization, for example).


** {Generate report}

	A report is a document that aggregates and presents data within a defined scope. 
	A report can be generated as online in HTML (opened in another browser window) or as a PDF (opened in PDF reader as configured by browser).
	
	A report can be generated for different scopes: [ (all, organization, role) X ] (system, project, model, scenario).
	For example, an Issues report can be produced for an entire organization covering a single model (i.e. meaning all organization roles in all scenarios in the model),
	or a report can be produced for the entire system etc.
	
	Certain reports are available only to authorized users. 
	Only admins can request reports at the system scope.
	Only liaisons can request reports at the scope of the organization across projects (system scope). 
	A participant in a project can request a report about the project, models and scenarios within it.
	
	Simply put, a user can not ask for a report that contains information about or information derived from elements the user does not have access to.
	
	There are different kinds of reports:
	
	[Playbook] <Scopes = (all, organization, role) X (project, model, scenario).> The report organizes exchanges per events and per roles. Each accompanied with instructions (urgency, what to communicate, escalation...) 
	and the needed contact infos etc. The report is meant to be used "in the field" and is thus appropriately indexed and provides empty fields to log communications (when , who, status).
	
	[Issues] <Scopes = (all, organization, role) X (project, model, scenario).> The report organizes the detected and reported issues, prioritized, together with impact analysis for each issue and proposed solution, if any.
	
	[Preparedness] <Scopes = (all, organization, role) X (system, project, model, scenario).> This short, executive summary type report a summary of models and scenarios, with capability metrics and key issues.
	
	[Audit] <Scopes = system, project, model, scenario> This report documents the state of the system (resource usage etc.) and provides metrics and aggregated data about participation and user activity.
	
	[]
	
** {Invite user}

	A participant, i.e. a certified member of an organization, can make it easy for someone from the same organization to join in.
	
	The participant requests the registration of a new user.

	The participant fills out the user registration form on behalf of user, including name but <<not>> email address.

	The participant selects an organization he/she is a certified member of and certifies that the new user is a member of it as well. 

	The participant then becomes the new user's mentor.

	The participant may indentify and describe the roles the new user plays within the organization (the goal being to minimize data entry for the new user).

	The participant then sends the invitation (here the email address is entered but is not retained) which will be received as an email 
	with a link for the new user to access to confirm acceptance of the invitation.
	
	The organization's liaison will receive a notification and may decide to cancel the certification.

	<The liaison either authorizes the certification before or after it is sent out (a user setting for the liaison).>
	
** {Chat}

	Whenever an element is displayed, be it in a list, a diagram, a map, a timeline etc., 
	a participant can select it and request that a chat be opened on the element as the topic of conversation.
	
	The element can be "large or small", namely it can be a project, a model or a scenario down to a task, a need to know, an information asset etc.
	An element can be within the scope of another, for example a need to know on a task in in the scope of the task which is in the scope of a scenario,
	which is in the scope of a model which is in the scope of a project. A message added to a conversation about an element is also visible from the conversation
	about the "enclosing" element etc. A participant wanting to see all that's being discussed in a scenario would open a chat on that scenario.
	
	A conversation about a topic is ongoing; previous messages are never lost and can be viewed by all participants.
	
	Other participants are automatically {{{#alerts} alerted}} that a conversation is initiated or is being picked up again. They are those who:
	
	* have already contributed to the conversation,
	
	* or have contributed to the addition or description of the element, 

	* or have {{{#authority_vs_opinions}direct authority}} over the element,
	
	* or have previously {{{#signal_interest}signaled interest}} in the element,
	
	* <<and>> have not {{{#signal_no_interest}requested not to be alerted}} about the element.
	
	[]
	
	When in a conversation, the participant can:
	
	* Enter a message,
	
	* Scroll to other messages,
	
	* Search a conversation (find function)
	
	* See all contributing participants, and those currently online
	
	* Mark a message as important (the flag visible to all, not just to the participant who enters it)
	
	* Scroll to previous/next important message
	
	[]
	
	When a participant is alerted about a new or re-activated conversation, the participant can elect to enter the conversation.
	
	A participant can:
	
	* list all conversations he/she has ever participated in and enter any,
	
	* by looking at element, see if there is a conversation about this element and if the conversation is active,
	
	* request arbitration from someone with direct or indirect authority over an element in case of an unresolved dispute about that element (authoritative users are alerted).
	
	[]
	
** {Todos}

	A participants manages a to do list containing "todos" describing about what the participant could or should do next in Channels.
	
	Todos are a very important mechanism by which the system and other participants can communicate with a participant.
	
	A participant's todo can be entered by the participant, by another participant (as an opinion) or by the system (as a suggestion).
	A participant can confirm/accept a proposed todo, or reject it (the todo is not lost, allowing the participant to change his/her mind later).
	
	Todos are typed, described and prioritized. A todo may contain a link that takes the participant to where something needs to be done.
	
	The participant can:
	
	* enter and describe a todo for self, some particular participant or whoever has authority over an element (this can be done by selecting an element and creating a todo on it - the todo will then link to the element)
	
	* sort and filter a todo list (hide completed, show most urgent ones, hide proposed, show most recent first etc.),
	
	* search a todo list (find function),
	
	* accept/reject a proposed todo,
	
	* delete a todo he/she entered,
	
	* got to element, conversation etc. where something needs to be done,
	
	* add comment to a todo,
	
	* mark a todo as opened, then as closed.
	
	[]
	
** {Alerts}

	Alerting is the mechanism by which the system brings to the attention of a participant 
	what's happening in a Channels site that should be of immediate interest to that participant.
	
	Each action taken within Channels can raise one or more alerts to one or more participants.
	The action can raise alerts either by itself (such as asserting a need to know) or 
	because of a consequence of this action (such as an Issue being inferred by the system).
	
	Alerts are raised whenever:
	
	* an element of interest to the participant is modified,
	
	* a conversation in which the participant took part is re-activated,
	
	* a todo for a participant is proposed (either opined by another participant or suggested by the system).
	
	[]
	
	A participant is interested in an element if he/she:
	
	* has {{{#authority_vs_opinions} direct authority}} over that element,
	
	* or has explicitly signaled interest in the element and/or those within its scope,
	
	* and has <<not>> signaled no interest in the element and/or those within its scope.
	
	[]
	
	A participant can see a list of all alerts and
	
	* sort and filter the list based on type, priority, date etc.
	
	* select an alert and see its details,
	
	* mark an alert as read/unread
	
	* if the alert is caused by a prior explicit or implicit interest in the element, 
	the participant can easily signal no further interest (bother me no more)
	
	[]

	Wherever an element is listed, a participant can signal interest or signal no interest.

*** Signal interest

	A participant can select an element and express an explicit interest in that element.
	The participant can limit this interest to the element itself include all elements within its scope.
	For example, a participant can indicate interest in a scenario, and in all elements within it. Or she can
	limit that interest to the description of the scenario itself.
	
	A participant should receive a visual cue when looking at a element in a list, timeline, map etc. that indicates
	that the element is of interest to the participant.
	
	The participant should also be able to list all elements in which he/she has explicitly signaled an interest and no interest.
	

*** Signal no interest
	
	Wherever an element of interest is shown, a participant can signal no interest, possibly reversing a prior signal of interest.

	